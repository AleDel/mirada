<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
<compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="d3/d63/classcv_1_1Mat" kind="class" language="C++" prot="public">
    <compoundname>cv::Mat</compoundname>
    <derivedcompoundref refid="df/dfc/classcv_1_1Mat__" prot="public" virt="non-virtual">cv::Mat_&lt; _Tp &gt;</derivedcompoundref>
    <derivedcompoundref refid="df/dfc/classcv_1_1Mat__" prot="public" virt="non-virtual">cv::Mat_&lt; double &gt;</derivedcompoundref>
    <derivedcompoundref refid="df/dfc/classcv_1_1Mat__" prot="public" virt="non-virtual">cv::Mat_&lt; float &gt;</derivedcompoundref>
    <derivedcompoundref refid="df/dfc/classcv_1_1Mat__" prot="public" virt="non-virtual">cv::Mat_&lt; int &gt;</derivedcompoundref>
    <derivedcompoundref refid="df/dfc/classcv_1_1Mat__" prot="public" virt="non-virtual">cv::Mat_&lt; uchar &gt;</derivedcompoundref>
    <includes local="no">opencv2/core/mat.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150" prot="public" static="no">
        <name>@13</name>
        <enumvalue id="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a2082a2faa4b65dedcc5b84433c97f817" prot="public">
          <name>MAGIC_VAL</name>
          <initializer>= 0x42FF0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a1c147538fd896f4f9abce9eaea9727e3" prot="public">
          <name>AUTO_STEP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a3a50403178ba15a9617f5ff341418cf9" prot="public">
          <name>CONTINUOUS_FLAG</name>
          <initializer>= CV_MAT_CONT_FLAG</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a1db725f4a7efd16a41581b4fc54e7aad" prot="public">
          <name>SUBMATRIX_FLAG</name>
          <initializer>= CV_SUBMAT_FLAG</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2073" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2073" bodyend="2073"/>
      </memberdef>
      <memberdef kind="enum" id="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600" prot="public" static="no">
        <name>@14</name>
        <enumvalue id="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600a1b2031796886cd80edd90640bc17fb50" prot="public">
          <name>MAGIC_MASK</name>
          <initializer>= 0xFFFF0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600a03b3e6a1defa1189b67c9f3d70b7c448" prot="public">
          <name>TYPE_MASK</name>
          <initializer>= 0x00000FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600a1454580da17d20c8ec5917170dc3da3a" prot="public">
          <name>DEPTH_MASK</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2074" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2074" bodyend="2074"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1a4d2eb7a536cd5a0f18808b6112111d6a" prot="public" static="no" mutable="no">
        <type><ref refid="df/d4c/classcv_1_1MatAllocator" kindref="compound">MatAllocator</ref> *</type>
        <definition>MatAllocator* cv::Mat::allocator</definition>
        <argsstring/>
        <name>allocator</name>
        <briefdescription>
<para>custom allocator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2096" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1aa3e5a47585c9ef6a0842556739155e3e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::cols</definition>
        <argsstring/>
        <name>cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2086" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1a4d33bed1c850265370d2af0ff02e1564" prot="public" static="no" mutable="no">
        <type><ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::data</definition>
        <argsstring/>
        <name>data</name>
        <briefdescription>
<para>pointer to the data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2088" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1ae756e84c94cbcf4c152ed0e67edb71ca" prot="public" static="no" mutable="no">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::dataend</definition>
        <argsstring/>
        <name>dataend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2092" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2092" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1a21a0a0eb9814f0093452601fcbdc8a46" prot="public" static="no" mutable="no">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::datalimit</definition>
        <argsstring/>
        <name>datalimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2093" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1aeda6d607bfc629a95f59e7b538832172" prot="public" static="no" mutable="no">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::datastart</definition>
        <argsstring/>
        <name>datastart</name>
        <briefdescription>
<para>helper fields used in locateROI and adjustROI </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2091" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1a39cf614aa52567e9a945cd2609bd767b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::dims</definition>
        <argsstring/>
        <name>dims</name>
        <briefdescription>
<para>the matrix dimensionality, &gt;= 2 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2084" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1af9333f06c84f115fda4cdf3af18c2ad0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::flags</definition>
        <argsstring/>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>includes several bit-fields:<itemizedlist>
<listitem><para>the magic signature</para></listitem><listitem><para>continuity flag</para></listitem><listitem><para>depth</para></listitem><listitem><para>number of channels </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2082" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1abed816466c45234254d25bc59c31245e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::rows</definition>
        <argsstring/>
        <name>rows</name>
        <briefdescription>
<para>the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2086" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1a146f8e8dda07d1365a575ab83d9828d1" prot="public" static="no" mutable="no">
        <type><ref refid="df/d63/structcv_1_1MatSize" kindref="compound">MatSize</ref></type>
        <definition>MatSize cv::Mat::size</definition>
        <argsstring/>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2108" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1ab4b0843e64328eb2a026b5b9ede726fe" prot="public" static="no" mutable="no">
        <type><ref refid="d4/d26/structcv_1_1MatStep" kindref="compound">MatStep</ref></type>
        <definition>MatStep cv::Mat::step</definition>
        <argsstring/>
        <name>step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2109" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d63/classcv_1_1Mat_1a2742469fe595e1b9036f60d752d08461" prot="public" static="no" mutable="no">
        <type><ref refid="db/d58/structcv_1_1UMatData" kindref="compound">UMatData</ref> *</type>
        <definition>UMatData* cv::Mat::u</definition>
        <argsstring/>
        <name>u</name>
        <briefdescription>
<para>interaction with <ref refid="d7/d45/classcv_1_1UMat" kindref="compound">UMat</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2106" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="2106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1af1d014cecd1510cdf580bf2ed7e5aafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>()</argsstring>
        <name>Mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These are various constructors that form a matrix. As noted in the AutomaticAllocation, often the default constructor is enough, and the proper matrix will be allocated by an OpenCV function. The constructed matrix can further be assigned to another matrix or matrix expression or can be allocated with <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">Mat::create</ref> . In the former case, the old content is de-referenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a2ec3402f7d165ca34c7fd6e8498a62ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in a 2D array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in a 2D array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a75a97b1e4e55f380c172af58048a7cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>2D array size: Size(cols, rows) . In the <ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size()</ref> constructor, the number of rows and the number of columns go in the reverse order. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a3620c370690b5ca4d40c767be6fb4ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int rows, int cols, int type, const Scalar &amp;s)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb" kindref="member">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in a 2D array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in a 2D array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator <ref refid="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" kindref="member">Mat::operator=(const Scalar&amp; value)</ref> . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="827" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a286371a6196eaaaf0b86e158590460b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Size size, int type, const Scalar &amp;s)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb" kindref="member">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>2D array size: Size(cols, rows) . In the <ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size()</ref> constructor, the number of rows and the number of columns go in the reverse order. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator <ref refid="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" kindref="member">Mat::operator=(const Scalar&amp; value)</ref> . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a156df5a1326dd5c30b187b0e721a5f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int ndims, const int *sizes, int type)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Array dimensionality. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying an n-dimensional array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6adc4d64db5379bcbb713e71c9292f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;sizes, int type)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying an n-dimensional array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="853" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1afbf34be80b7443123b2a032a67c3c4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int ndims, const int *sizes, int type, const Scalar &amp;s)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb" kindref="member">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Array dimensionality. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying an n-dimensional array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator <ref refid="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" kindref="member">Mat::operator=(const Scalar&amp; value)</ref> . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ad20a78b5501fc39543a240142a40e234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;sizes, int type, const Scalar &amp;s)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb" kindref="member">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying an n-dimensional array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional value to initialize each matrix element with. To set all the matrix elements to the particular value after the construction, use the assignment operator <ref refid="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" kindref="member">Mat::operator=(const Scalar&amp; value)</ref> . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a294eaf8a95d2f9c7be19ff594d06278e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use <ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">Mat::clone()</ref> . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a51615ebf17a64c968df0bf49b4de6a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int rows, int cols, int type, void *data, size_t step=AUTO_STEP)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
          <defval><ref refid="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a1c147538fd896f4f9abce9eaea9727e3" kindref="member">AUTO_STEP</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in a 2D array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in a 2D array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any. If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize(). See <ref refid="d3/d63/classcv_1_1Mat_1aba7a5ef00b22b70668fba575005dfe55" kindref="member">Mat::elemSize</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a9fa74fb14362d87cb183453d2441948f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Size size, int type, void *data, size_t step=AUTO_STEP)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
          <defval><ref refid="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a1c147538fd896f4f9abce9eaea9727e3" kindref="member">AUTO_STEP</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>2D array size: Size(cols, rows) . In the <ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size()</ref> constructor, the number of rows and the number of columns go in the reverse order. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes each matrix row occupies. The value should include the padding bytes at the end of each row, if any. If the parameter is missing (set to AUTO_STEP ), no padding is assumed and the actual step is calculated as cols*elemSize(). See <ref refid="d3/d63/classcv_1_1Mat_1aba7a5ef00b22b70668fba575005dfe55" kindref="member">Mat::elemSize</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a5fafc033e089143062fd31015b5d0f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int ndims, const int *sizes, int type, void *data, const size_t *steps=0)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>steps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Array dimensionality. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying an n-dimensional array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). If not specified, the matrix is assumed to be continuous. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="931" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a922de793eabcec705b3579c5f95a643e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;sizes, int type, void *data, const size_t *steps=0)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t *</type>
          <declname>steps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying an n-dimensional array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel matrices, or <ref refid="d1/d1b/group__core__hal__interface_1ga78c5506f62d99edd7e83aba259250394" kindref="member">CV_8UC(n)</ref>, ..., <ref refid="d1/d1b/group__core__hal__interface_1ga4213eb262159eb6da4edf8c9255e8244" kindref="member">CV_64FC(n)</ref> to create multi-channel (up to CV_CN_MAX channels) matrices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the user data. Matrix constructors that take data and step parameters do not allocate matrix data. Instead, they just initialize the matrix header that points to the specified data, which means that no data is copied. This operation is very efficient and can be used to process external data using OpenCV functions. The external data is not automatically deallocated, so you should take care of it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of ndims-1 steps in case of a multi-dimensional array (the last step is always set to the element size). If not specified, the matrix is assumed to be continuous. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a92a3e9e5911a2eb0cf0950a0a9670c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m, const Range &amp;rowRange, const Range &amp;colRange=Range::all())</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> &amp;</type>
          <declname>rowRange</declname>
        </param>
        <param>
          <type>const <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> &amp;</type>
          <declname>colRange</declname>
          <defval><ref refid="da/d35/classcv_1_1Range_1af5a0207f6f98a69077db8e77898abc0f" kindref="member">Range::all</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use <ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">Mat::clone()</ref> . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowRange</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> of the m rows to take. As usual, the range start is inclusive and the range end is exclusive. Use <ref refid="da/d35/classcv_1_1Range_1af5a0207f6f98a69077db8e77898abc0f" kindref="member">Range::all()</ref> to take all the rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colRange</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> of the m columns to take. Use <ref refid="da/d35/classcv_1_1Range_1af5a0207f6f98a69077db8e77898abc0f" kindref="member">Range::all()</ref> to take all the columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa7ec97373406215f2d4bc72cc1d27036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m, const Rect &amp;roi)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8" kindref="member">Rect</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use <ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">Mat::clone()</ref> . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roi</parametername>
</parameternamelist>
<parameterdescription>
<para>Region of interest. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="967" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1afde22a742fc73c0a150a9002310ac2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m, const Range *ranges)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> *</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use <ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">Mat::clone()</ref> . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ranges</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of selected ranges of m along each dimensionality. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="977" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa6e903a6c762478692791a33d233019b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m, const std::vector&lt; Range &gt; &amp;ranges)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Array that (as a whole or partly) is assigned to the constructed matrix. No data is copied by these constructors. Instead, the header pointing to m data or its sub-array is constructed and associated with it. The reference counter, if any, is incremented. So, when you modify the matrix formed using such a constructor, you also modify the corresponding elements of m . If you want to have an independent copy of the sub-array, use <ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">Mat::clone()</ref> . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ranges</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of selected ranges of m along each dimensionality. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a23b182c4ffd46abe38f460c1480ae887" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::vector&lt; _Tp &gt; &amp;vec, bool copyData=false)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::vector&lt; _Tp &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>STL vector whose elements form the matrix. The matrix has a single column and the number of rows equal to the number of vector elements. Type of the matrix matches the type of vector elements. The constructor can handle arbitrary types, for which there is a properly declared <ref refid="d0/d3a/classcv_1_1DataType" kindref="compound">DataType</ref> . This means that the vector elements must be primitive numbers or uni-type numerical tuples of numbers. Mixed-type structures are not supported. The corresponding constructor is explicit. Since STL vectors are not automatically converted to <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> instances, you should write Mat(vec) explicitly. Unless you copy the data into the matrix ( copyData=true ), no new elements will be added to the vector because it can potentially yield vector data reallocation, and, thus, the matrix data pointer will be invalid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copyData</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to specify whether the underlying data of the STL vector should be copied to (true) or shared with (false) the newly constructed matrix. When the data is copied, the allocated buffer is managed using <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> reference counting mechanism. While the data is shared, the reference counter is NULL, and you should not deallocate the data until the matrix is not destructed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1005" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1afccd5d581d7dc205925debf83ea4c7be" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;_Tp&gt;::value&gt;::<ref refid="d3/d63/classcv_1_1Mat_1af2d2652e552d7de635988f18a84b53e5" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::initializer_list&lt; _Tp &gt; list)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::initializer_list&lt; _Tp &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a174d591e68a4876f7164aefb1f3551d5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::initializer_list&lt; int &gt; sizes, const std::initializer_list&lt; _Tp &gt; list)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::initializer_list&lt; int &gt;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; _Tp &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1014" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1af831f6ce5e9ff546682e8155b5c835b1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>_Nm</declname>
            <defname>_Nm</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const std::array&lt; _Tp, _Nm &gt; &amp;arr, bool copyData=false)</argsstring>
        <name>Mat</name>
        <param>
          <type>const std::array&lt; _Tp, _Nm &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1018" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a507e01fb48b34a3e5c45f9f5b00725e8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Vec&lt; _Tp, n &gt; &amp;vec, bool copyData=true)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; _Tp, n &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1022" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a37068a8d9acc7cc5af817eb82b2aa83b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Matx&lt; _Tp, m, n &gt; &amp;mtx, bool copyData=true)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="de/de1/classcv_1_1Matx" kindref="compound">Matx</ref>&lt; _Tp, m, n &gt; &amp;</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1026" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a224477889ddc7424aaab1b76e7682ea2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Point_&lt; _Tp &gt; &amp;pt, bool copyData=true)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="db/d4e/classcv_1_1Point__" kindref="compound">Point_</ref>&lt; _Tp &gt; &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a7d72610ed5aed9117eb7933a97670309" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Point3_&lt; _Tp &gt; &amp;pt, bool copyData=true)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="df/d6c/classcv_1_1Point3__" kindref="compound">Point3_</ref>&lt; _Tp &gt; &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1034" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a23957ae2fed348c67952c0d69c873972" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const MatCommaInitializer_&lt; _Tp &gt; &amp;commaInitializer)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="d6/d9e/classcv_1_1MatCommaInitializer__" kindref="compound">MatCommaInitializer_</ref>&lt; _Tp &gt; &amp;</type>
          <declname>commaInitializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1038" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa82eca82664985c81c7912b04549370d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const cuda::GpuMat &amp;m)</argsstring>
        <name>Mat</name>
        <param>
          <type>const cuda::GpuMat &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>download data from GpuMat </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1041" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1adcaeb226bafeff8a1b262f57f6ffbcc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Mat &amp;&amp;m)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2070" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a1b2ae166171f6a7306cf09ff67a2153f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cv::Mat::~Mat</definition>
        <argsstring>()</argsstring>
        <name>~Mat</name>
        <briefdescription>
<para>destructor - calls <ref refid="d3/d63/classcv_1_1Mat_1ae48d4913285518e2c21a3457017e716e" kindref="member">release()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1044" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a9d3794250e3dc39714f980b4d0d45864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::addref</definition>
        <argsstring>()</argsstring>
        <name>addref</name>
        <briefdescription>
<para>Increments the reference counter. </para>        </briefdescription>
        <detaileddescription>
<para>The method increments the reference counter associated with the matrix data. If the matrix header points to an external data set (see <ref refid="d3/d63/classcv_1_1Mat_1af1d014cecd1510cdf580bf2ed7e5aafc" kindref="member">Mat::Mat</ref> ), the reference counter is NULL, and the method has no effect in this case. Normally, to avoid memory leaks, the method should not be called explicitly. It is called implicitly by the matrix assignment operator. The reference counter increment is an atomic operation on the platforms that support it. Thus, it is safe to operate on the same matrices asynchronously in different threads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a2fece3507ee7e1284deee6da99e76b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::adjustROI</definition>
        <argsstring>(int dtop, int dbottom, int dleft, int dright)</argsstring>
        <name>adjustROI</name>
        <param>
          <type>int</type>
          <declname>dtop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dbottom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dleft</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dright</declname>
        </param>
        <briefdescription>
<para>Adjusts a submatrix size and position within the parent matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The method is complimentary to <ref refid="d3/d63/classcv_1_1Mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96" kindref="member">Mat::locateROI</ref> . The typical use of these functions is to determine the submatrix position within the parent matrix and then shift the position somehow. Typically, it can be required for filtering operations when pixels outside of the ROI should be taken into account. When all the method parameters are positive, the ROI needs to grow in all directions by the specified amount, for example: <programlisting><codeline><highlight class="normal">A.adjustROI(2,<sp/>2,<sp/>2,<sp/>2);</highlight></codeline>
</programlisting> In this example, the matrix size is increased by 4 elements in each direction. The matrix is shifted by 2 elements to the left and 2 elements up, which brings in all the necessary pixels for the filtering with the 5x5 kernel.</para><para>adjustROI forces the adjusted ROI to be inside of the parent matrix that is boundaries of the adjusted ROI are constrained by boundaries of the parent matrix. For example, if the submatrix A is located in the first row of a parent matrix and you called A.adjustROI(2, 2, 2, 2) then A will not be increased in the upward direction.</para><para>The function is used internally by the OpenCV filtering functions, like filter2D , morphological operations, and so on. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtop</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift of the top submatrix boundary upwards. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dbottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift of the bottom submatrix boundary downwards. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dleft</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift of the left submatrix boundary to the left. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dright</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift of the right submatrix boundary to the right. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d2/de8/group__core__array_1ga2ac1049c2c3dd25c2b41bffe17658a36" kindref="member">copyMakeBorder</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa8b3b4d7b9876a4726740b75daa98ddb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::assignTo</definition>
        <argsstring>(Mat &amp;m, int type=-1) const</argsstring>
        <name>assignTo</name>
        <param>
          <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Provides a functional form of convertTo. </para>        </briefdescription>
        <detaileddescription>
<para>This is an internally used method called by the <ref refid="d1/d10/classcv_1_1MatExpr_1MatrixExpressions" kindref="member">MatrixExpressions</ref> engine. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired destination array depth (or -1 if it should be the same as the source type). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(int i0=0)</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a reference to the specified array element. </para>        </briefdescription>
        <detaileddescription>
<para>The template methods return a reference to the specified array element. For the sake of higher performance, the index range checks are only performed in the Debug configuration.</para><para>Note that the variants with a single index (i) can be used to access elements of single-row or single-column 2-dimensional arrays. That is, if, for example, A is a 1 x N floating-point matrix and B is an M x 1 integer matrix, you can simply write <computeroutput>A.at&lt;float&gt;(k+4)</computeroutput> and <computeroutput>B.at&lt;int&gt;(2*i+1)</computeroutput> instead of <computeroutput>A.at&lt;float&gt;(0,k+4)</computeroutput> and <computeroutput>B.at&lt;int&gt;(2*i+1,0)</computeroutput>, respectively.</para><para>The example below initializes a Hilbert matrix: <programlisting><codeline><highlight class="normal">Mat<sp/>H(100,<sp/>100,<sp/>CV_64F);</highlight></codeline>
<codeline><highlight class="normal">for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>H.rows;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>H.cols;<sp/>j++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.at&lt;double&gt;(i,j)=1./(i+j+1);</highlight></codeline>
</programlisting></para><para>Keep in mind that the size identifier used in the at operator cannot be chosen at random. It depends on the image from which you are trying to retrieve the data. The table below gives a better insight in this:<itemizedlist>
<listitem><para>If matrix is of type <computeroutput>CV_8U</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;uchar&gt;(y,x)</computeroutput>.</para></listitem><listitem><para>If matrix is of type <computeroutput>CV_8S</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;schar&gt;(y,x)</computeroutput>.</para></listitem><listitem><para>If matrix is of type <computeroutput>CV_16U</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;ushort&gt;(y,x)</computeroutput>.</para></listitem><listitem><para>If matrix is of type <computeroutput>CV_16S</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;short&gt;(y,x)</computeroutput>.</para></listitem><listitem><para>If matrix is of type <computeroutput>CV_32S</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;int&gt;(y,x)</computeroutput>.</para></listitem><listitem><para>If matrix is of type <computeroutput>CV_32F</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;float&gt;(y,x)</computeroutput>.</para></listitem><listitem><para>If matrix is of type <computeroutput>CV_64F</computeroutput> then use <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" kindref="member">Mat.at</ref>&lt;double&gt;(y,x)</computeroutput>.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1911" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a330d9adb78976b6efd4116c940924294" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(int i0=0) const</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ac40425b84f60b39fd35e03814122661f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1920" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a5db6b18954e334048cb35752f49c6f8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1925" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a305829ed5c0ecfef7b44db18953048e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(int i0, int i1, int i2)</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a59c6c2d9db1cfba76d75addeeb4e6a84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(int i0, int i1, int i2) const</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1938" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a474bd5cdcf986672cfdc304f6be1cf64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(const int *idx)</argsstring>
        <name>at</name>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="d3/d63/classcv_1_1Mat_1a39cf614aa52567e9a945cd2609bd767b" kindref="member">Mat::dims</ref> indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a2cbbb16670ae4d9aa747f19c24305213" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(const int *idx) const</argsstring>
        <name>at</name>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of <ref refid="d3/d63/classcv_1_1Mat_1a39cf614aa52567e9a945cd2609bd767b" kindref="member">Mat::dims</ref> indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a9ec1aadc17ab8c8f8334d521719c7732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(const Vec&lt; int, n &gt; &amp;idx)</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; int, n &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a15c649a94cf2e06240b32b025231301f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(const Vec&lt; int, n &gt; &amp;idx) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; int, n &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a23cd599a27c59bae64b0c40ad645ea49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(Point pt)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192" kindref="member">Point</ref></type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. special versions for 2D arrays (especially convenient for referencing image pixels) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Element position specified as Point(j,i) . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1958" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a87d0b2e01b0f8686957398ecfb168a6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(Point pt) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192" kindref="member">Point</ref></type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. special versions for 2D arrays (especially convenient for referencing image pixels) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Element position specified as Point(j,i) . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1963" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a33ee3bc402827f587a5ad64b568d6986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/dfe/classcv_1_1MatIterator__" kindref="compound">MatIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatIterator_&lt;_Tp&gt; cv::Mat::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns the matrix iterator and sets it to the first matrix element. </para>        </briefdescription>
        <detaileddescription>
<para>The methods return the matrix read-only or read-write iterators. The use of matrix iterators is very similar to the use of bi-directional STL iterators. In the example below, the alpha blending function is rewritten using the matrix iterators: <programlisting><codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>alphaBlendRGBA(const<sp/>Mat&amp;<sp/>src1,<sp/>const<sp/>Mat&amp;<sp/>src2,<sp/>Mat&amp;<sp/>dst)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Vec&lt;T,<sp/>4&gt;<sp/>VT;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>float<sp/>alpha_scale<sp/>=<sp/>(float)std::numeric_limits&lt;T&gt;::max(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv_scale<sp/>=<sp/>1.f/alpha_scale;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CV_Assert(<sp/>src1.type()<sp/>==<sp/>src2.type()<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src1.type()<sp/>==<sp/>traits::Type&lt;VT&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src1.size()<sp/>==<sp/>src2.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>size<sp/>=<sp/>src1.size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dst.create(size,<sp/>src1.type());</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MatConstIterator_&lt;VT&gt;<sp/>it1<sp/>=<sp/>src1.begin&lt;VT&gt;(),<sp/>it1_end<sp/>=<sp/>src1.end&lt;VT&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MatConstIterator_&lt;VT&gt;<sp/>it2<sp/>=<sp/>src2.begin&lt;VT&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MatIterator_&lt;VT&gt;<sp/>dst_it<sp/>=<sp/>dst.begin&lt;VT&gt;();</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(<sp/>;<sp/>it1<sp/>!=<sp/>it1_end;<sp/>++it1,<sp/>++it2,<sp/>++dst_it<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VT<sp/>pix1<sp/>=<sp/>*it1,<sp/>pix2<sp/>=<sp/>*it2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>alpha<sp/>=<sp/>pix1[3]*inv_scale,<sp/>beta<sp/>=<sp/>pix2[3]*inv_scale;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dst_it<sp/>=<sp/>VT(saturate_cast&lt;T&gt;(pix1[0]*alpha<sp/>+<sp/>pix2[0]*beta),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saturate_cast&lt;T&gt;(pix1[1]*alpha<sp/>+<sp/>pix2[1]*beta),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saturate_cast&lt;T&gt;(pix1[2]*alpha<sp/>+<sp/>pix2[2]*beta),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saturate_cast&lt;T&gt;((1<sp/>-<sp/>(1-alpha)*(1-beta))*alpha_scale));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aef8f88bc1f72757b0f2ddb3041611c73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/de0/classcv_1_1MatConstIterator__" kindref="compound">MatConstIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatConstIterator_&lt;_Tp&gt; cv::Mat::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2002" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa11336b9ac538e0475d840657ce164be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::channels</definition>
        <argsstring>() const</argsstring>
        <name>channels</name>
        <briefdescription>
<para>Returns the number of matrix channels. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns the number of matrix channels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a167a8e0a3a3d86e84b70e33483af4466" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::checkVector</definition>
        <argsstring>(int elemChannels, int depth=-1, bool requireContinuous=true) const</argsstring>
        <name>checkVector</name>
        <param>
          <type>int</type>
          <declname>elemChannels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>requireContinuous</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elemChannels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels or number of columns the matrix should have. For a 2-D matrix, when the matrix has only 1 column, then it should have elemChannels channels; When the matrix has only 1 channel, then it should have elemChannels columns. For a 3-D matrix, it should have only one channel. Furthermore, if the number of planes is not one, then the number of rows within every plane has to be 1; if the number of rows within every plane is not 1, then the number of planes has to be 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth the matrix should have. Set it to -1 when any depth is fine. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requireContinuous</parametername>
</parameternamelist>
<parameterdescription>
<para>Set it to true to require the matrix to be continuous </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if the requirement is not satisfied. Otherwise, it returns the number of elements in the matrix. Note that an element may have multiple channels.</para></simplesect>
The following code demonstrates its usage for a 2-d matrix: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">cv::Mat</ref><sp/>mat(20,<sp/>1,<sp/><ref refid="d1/d1b/group__core__hal__interface_1ga15d6109d87682bf909122d0ce51c46a6" kindref="member">CV_32FC2</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>mat.checkVector(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b" kindref="member">CV_Assert</ref>(n<sp/>==<sp/>20);<sp/></highlight><highlight class="comment">//<sp/>mat<sp/>has<sp/>20<sp/>elements</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mat.create(20,<sp/>2,<sp/><ref refid="d1/d1b/group__core__hal__interface_1ga32ec76240e43e4c9c7b2e2785180a7e6" kindref="member">CV_32FC1</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>mat.checkVector(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b" kindref="member">CV_Assert</ref>(n<sp/>==<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>mat<sp/>is<sp/>neither<sp/>a<sp/>column<sp/>nor<sp/>a<sp/>row<sp/>vector</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>mat.checkVector(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b" kindref="member">CV_Assert</ref>(n<sp/>==<sp/>20);<sp/></highlight><highlight class="comment">//<sp/>the<sp/>2<sp/>columns<sp/>are<sp/>considered<sp/>as<sp/>1<sp/>element</highlight><highlight class="normal"/></codeline>
</programlisting> The following code demonstrates its usage for a 3-d matrix: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d3/d63/classcv_1_1Mat_1a39cf614aa52567e9a945cd2609bd767b" kindref="member">dims</ref>[]<sp/>=<sp/>{1,<sp/>3,<sp/>5};<sp/></highlight><highlight class="comment">//<sp/>1<sp/>plane,<sp/>every<sp/>plane<sp/>has<sp/>3<sp/>rows<sp/>and<sp/>5<sp/>columns</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mat.create(3,<sp/>dims,<sp/><ref refid="d1/d1b/group__core__hal__interface_1ga32ec76240e43e4c9c7b2e2785180a7e6" kindref="member">CV_32FC1</ref>);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>3-d<sp/>mat,<sp/>it<sp/>MUST<sp/>have<sp/>only<sp/>1<sp/>channel</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>mat.checkVector(5);<sp/></highlight><highlight class="comment">//<sp/>the<sp/>5<sp/>columns<sp/>are<sp/>considered<sp/>as<sp/>1<sp/>element</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b" kindref="member">CV_Assert</ref>(n<sp/>==<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dims2[]<sp/>=<sp/>{3,<sp/>1,<sp/>5};<sp/></highlight><highlight class="comment">//<sp/>3<sp/>planes,<sp/>every<sp/>plane<sp/>has<sp/>1<sp/>row<sp/>and<sp/>5<sp/>columns</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mat.create(3,<sp/>dims2,<sp/><ref refid="d1/d1b/group__core__hal__interface_1ga32ec76240e43e4c9c7b2e2785180a7e6" kindref="member">CV_32FC1</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>mat.checkVector(5);<sp/></highlight><highlight class="comment">//<sp/>the<sp/>5<sp/>columns<sp/>are<sp/>considered<sp/>as<sp/>1<sp/>element</highlight><highlight class="normal"/></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b" kindref="member">CV_Assert</ref>(n<sp/>==<sp/>3);</highlight></codeline>
</programlisting></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::clone</definition>
        <argsstring>() const CV_NODISCARD</argsstring>
        <name>clone</name>
        <briefdescription>
<para>Creates a full copy of the array and the underlying data. </para>        </briefdescription>
        <detaileddescription>
<para>The method creates a full copy of the array. The original step[] is not taken into account. So, the array copy is a continuous array occupying <ref refid="d3/d63/classcv_1_1Mat_1aa4d317d43fb0cba9c2503f3c61b866c8" kindref="member">total()</ref>*elemSize() bytes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::col</definition>
        <argsstring>(int x) const</argsstring>
        <name>col</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Creates a matrix header for the specified matrix column. </para>        </briefdescription>
        <detaileddescription>
<para>The method makes a new header for the specified matrix column and returns it. This is an O(1) operation, regardless of the matrix size. The underlying data of the new matrix is shared with the original matrix. See also the <ref refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" kindref="member">Mat::row</ref> description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A 0-based column index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aadc8f9210fe4dec50513746c246fa8d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::colRange</definition>
        <argsstring>(int startcol, int endcol) const</argsstring>
        <name>colRange</name>
        <param>
          <type>int</type>
          <declname>startcol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endcol</declname>
        </param>
        <briefdescription>
<para>Creates a matrix header for the specified column span. </para>        </briefdescription>
        <detaileddescription>
<para>The method makes a new header for the specified column span of the matrix. Similarly to <ref refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" kindref="member">Mat::row</ref> and <ref refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" kindref="member">Mat::col</ref> , this is an O(1) operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startcol</parametername>
</parameternamelist>
<parameterdescription>
<para>An inclusive 0-based start index of the column span. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endcol</parametername>
</parameternamelist>
<parameterdescription>
<para>An exclusive 0-based ending index of the column span. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1acccb63e44eba6ba81ead99881bd1997e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::colRange</definition>
        <argsstring>(const Range &amp;r) const</argsstring>
        <name>colRange</name>
        <param>
          <type>const <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> structure containing both the start and the end indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1adf88c60c5b4980e05bb556080916978b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::convertTo</definition>
        <argsstring>(OutputArray m, int rtype, double alpha=1, double beta=0) const</argsstring>
        <name>convertTo</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0" kindref="member">OutputArray</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Converts an array to another data type with optional scaling. </para>        </briefdescription>
        <detaileddescription>
<para>The method converts source pixel values to the target data type. saturate_cast&lt;&gt; is applied at the end to avoid possible overflows:</para><para><formula id="29">\[m(x,y) = saturate \_ cast&lt;rType&gt;( \alpha (*this)(x,y) + \beta )\]</formula> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>output matrix; if it does not have a proper size or type before the operation, it is reallocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtype</parametername>
</parameternamelist>
<parameterdescription>
<para>desired output matrix type or, rather, the depth since the number of channels are the same as the input has; if rtype is negative, the output matrix will have the same type as the input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>optional scale factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>optional delta added to the scaled values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a39fd9880fc55b7a0993bcfff88061ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::copySize</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>copySize</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>internal use function; properly re-allocates _size, _step arrays </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a33fd5d125b4c302b0c9aa86980791a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::copyTo</definition>
        <argsstring>(OutputArray m) const</argsstring>
        <name>copyTo</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0" kindref="member">OutputArray</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Copies the matrix to another one. </para>        </briefdescription>
        <detaileddescription>
<para>The method copies the matrix data to another matrix. Before copying the data, the method invokes : <programlisting><codeline><highlight class="normal">m.create(this-&gt;size(),<sp/>this-&gt;type());</highlight></codeline>
</programlisting> so that the destination matrix is reallocated if needed. While m.copyTo(m); works flawlessly, the function does not handle the case of a partial overlap between the source and the destination matrices.</para><para>When the operation mask is specified, if the <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">Mat::create</ref> call shown above reallocates the matrix, the newly allocated matrix is initialized with all zeros before copying the data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination matrix. If it does not have a proper size or type before the operation, it is reallocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a626fe5f96d02525e2604d2ad46dd574f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::copyTo</definition>
        <argsstring>(OutputArray m, InputArray mask) const</argsstring>
        <name>copyTo</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1gaad17fda1d0f0d1ee069aebb1df2913c0" kindref="member">OutputArray</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba" kindref="member">InputArray</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination matrix. If it does not have a proper size or type before the operation, it is reallocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation mask of the same size as *this. Its non-zero elements indicate which matrix elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::create</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>create</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Allocates new array data if needed. </para>        </briefdescription>
        <detaileddescription>
<para>This is one of the key <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> methods. Most new-style OpenCV functions and methods that produce arrays call this method for each output array. The method uses the following algorithm:</para><para><orderedlist>
<listitem><para>If the current array shape and the type match the new ones, return immediately. Otherwise, de-reference the previous data by calling <ref refid="d3/d63/classcv_1_1Mat_1ae48d4913285518e2c21a3457017e716e" kindref="member">Mat::release</ref>.</para></listitem><listitem><para>Initialize the new header.</para></listitem><listitem><para>Allocate the new data of <ref refid="d3/d63/classcv_1_1Mat_1aa4d317d43fb0cba9c2503f3c61b866c8" kindref="member">total()</ref>*elemSize() bytes.</para></listitem><listitem><para>Allocate the new, associated with the data, reference counter and set it to 1.</para></listitem></orderedlist>
</para><para>Such a scheme makes the memory management robust and efficient at the same time and helps avoid extra typing for you. This means that usually there is no need to explicitly allocate output arrays. That is, instead of writing: <programlisting><codeline><highlight class="normal">Mat<sp/>color;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>gray(color.rows,<sp/>color.cols,<sp/>color.depth());</highlight></codeline>
<codeline><highlight class="normal">cvtColor(color,<sp/>gray,<sp/>COLOR_BGR2GRAY);</highlight></codeline>
</programlisting> you can simply write: <programlisting><codeline><highlight class="normal">Mat<sp/>color;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>gray;</highlight></codeline>
<codeline><highlight class="normal">cvtColor(color,<sp/>gray,<sp/>COLOR_BGR2GRAY);</highlight></codeline>
</programlisting> because cvtColor, as well as the most of OpenCV functions, calls <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">Mat::create()</ref> for the output array internally. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>New number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>New number of columns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>New matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a48409946d0e1bebb40fe765e18ec5eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::create</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternative new matrix size specification: Size(cols, rows) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>New matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aee53524ac61fa2ba441c4f29c3aca93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::create</definition>
        <argsstring>(int ndims, const int *sizes, int type)</argsstring>
        <name>create</name>
        <param>
          <type>int</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>New array dimensionality. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying a new array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>New matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a84f35d3923a92251631329eed66d2a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::create</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;sizes, int type)</argsstring>
        <name>create</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying a new array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>New matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a708b761e0d15b7b8db4c8e8c95a7abe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::cross</definition>
        <argsstring>(InputArray m) const</argsstring>
        <name>cross</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba" kindref="member">InputArray</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Computes a cross-product of two 3-element vectors. </para>        </briefdescription>
        <detaileddescription>
<para>The method computes a cross-product of two 3-element vectors. The vectors must be 3-element floating-point vectors of the same shape and size. The result is another 3-element vector of the same shape and type as operands. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Another cross-product operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ac6e9cdf9b450e360f005978b4e981b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::deallocate</definition>
        <argsstring>()</argsstring>
        <name>deallocate</name>
        <briefdescription>
<para>internal use function, consider to use 'release' method instead; deallocates the matrix data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a8da9f853b6f3a29d738572fd1ffc44c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <briefdescription>
<para>Returns the depth of a matrix element. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns the identifier of the matrix element depth (the type of each individual channel). For example, for a 16-bit signed element array, the method returns CV_16S . A complete list of matrix types contains the following values:<itemizedlist>
<listitem><para>CV_8U - 8-bit unsigned integers ( 0..255 )</para></listitem><listitem><para>CV_8S - 8-bit signed integers ( -128..127 )</para></listitem><listitem><para>CV_16U - 16-bit unsigned integers ( 0..65535 )</para></listitem><listitem><para>CV_16S - 16-bit signed integers ( -32768..32767 )</para></listitem><listitem><para>CV_32S - 32-bit signed integers ( -2147483648..2147483647 )</para></listitem><listitem><para>CV_32F - 32-bit floating-point numbers ( -FLT_MAX..FLT_MAX, INF, NAN )</para></listitem><listitem><para>CV_64F - 64-bit floating-point numbers ( -DBL_MAX..DBL_MAX, INF, NAN ) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1761" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a024cc0510a4c61c7f266d4ab9fe13d7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::diag</definition>
        <argsstring>(int d=0) const</argsstring>
        <name>diag</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Extracts a diagonal from a matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The method makes a new header for the specified matrix diagonal. The new matrix is represented as a single-column matrix. Similarly to <ref refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" kindref="member">Mat::row</ref> and <ref refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" kindref="member">Mat::col</ref>, this is an O(1) operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the diagonal, with the following values:<itemizedlist>
<listitem><para><computeroutput>d=0</computeroutput> is the main diagonal.</para></listitem><listitem><para><computeroutput>d&lt;0</computeroutput> is a diagonal from the lower half. For example, d=-1 means the diagonal is set immediately below the main one.</para></listitem><listitem><para><computeroutput>d&gt;0</computeroutput> is a diagonal from the upper half. For example, d=1 means the diagonal is set immediately above the main one. For example: <programlisting><codeline><highlight class="normal">Mat<sp/>m<sp/>=<sp/>(Mat_&lt;int&gt;(3,3)<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,2,3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,5,6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7,8,9);</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>d0<sp/>=<sp/>m.diag(0);</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>d1<sp/>=<sp/>m.diag(1);</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>d_1<sp/>=<sp/>m.diag(-1);</highlight></codeline>
</programlisting> The resulting matrices are <programlisting><codeline><highlight class="normal">d0<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>9]</highlight></codeline>
<codeline><highlight class="normal">d1<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>6]</highlight></codeline>
<codeline><highlight class="normal">d_1<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>8]</highlight></codeline>
</programlisting> </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a0f683eab191eeece33dfc64ae299a9cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cv::Mat::dot</definition>
        <argsstring>(InputArray m) const</argsstring>
        <name>dot</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba" kindref="member">InputArray</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Computes a dot-product of two vectors. </para>        </briefdescription>
        <detaileddescription>
<para>The method computes a dot-product of two matrices. If the matrices are not single-column or single-row vectors, the top-to-bottom left-to-right scan ordering is used to treat them as 1D vectors. The vectors must have the same size and type. If the matrices have more than one channel, the dot products from all the channels are summed together. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>another dot-product operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aba7a5ef00b22b70668fba575005dfe55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::elemSize</definition>
        <argsstring>() const</argsstring>
        <name>elemSize</name>
        <briefdescription>
<para>Returns the matrix element size in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns the matrix element size in bytes. For example, if the matrix type is CV_16SC3 , the method returns 3*sizeof(short) or 6. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a9acde8f32d4b294558fb406bc05171bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::elemSize1</definition>
        <argsstring>() const</argsstring>
        <name>elemSize1</name>
        <briefdescription>
<para>Returns the size of each matrix element channel in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns the matrix element channel size in bytes, that is, it ignores the number of channels. For example, if the matrix type is CV_16SC3 , the method returns sizeof(short) or 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1abbec3525a852e77998aba034813fded4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cv::Mat::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns true if the array has no elements. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns true if <ref refid="d3/d63/classcv_1_1Mat_1aa4d317d43fb0cba9c2503f3c61b866c8" kindref="member">Mat::total()</ref> is 0 or if <ref refid="d3/d63/classcv_1_1Mat_1a4d33bed1c850265370d2af0ff02e1564" kindref="member">Mat::data</ref> is NULL. Because of <ref refid="d3/d63/classcv_1_1Mat_1a88bbb01901fdfe3f1d0592c592e8757c" kindref="member">pop_back()</ref> and <ref refid="d3/d63/classcv_1_1Mat_1ad0127b138acfcc2dcd5dafc51175b309" kindref="member">resize()</ref> methods <computeroutput><ref refid="df/d57/namespacecv_1_1dnn_1a65ad6cf1b64a572bf78d696d2014b0e6" kindref="member">M.total()</ref> == 0</computeroutput> does not imply that <computeroutput>M.data == NULL</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1781" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a9dd628eeccedea6e181ca54d41830a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/dfe/classcv_1_1MatIterator__" kindref="compound">MatIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatIterator_&lt;_Tp&gt; cv::Mat::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns the matrix iterator and sets it to the after-last matrix element. </para>        </briefdescription>
        <detaileddescription>
<para>The methods return the matrix read-only or read-write iterators, set to the point following the last matrix element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2009" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a092f54359c99e42729715024fc662182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/de0/classcv_1_1MatConstIterator__" kindref="compound">MatConstIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatConstIterator_&lt;_Tp&gt; cv::Mat::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a952ef1a85d70a510240cb645a90efc0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Mat::forEach</definition>
        <argsstring>(const Functor &amp;operation)</argsstring>
        <name>forEach</name>
        <param>
          <type>const Functor &amp;</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Runs the given functor over all matrix elements in parallel. </para>        </briefdescription>
        <detaileddescription>
<para>The operation passed as argument has to be a function pointer, a function object or a lambda(C++11).</para><para>Example 1. All of the operations below put 0xFF the first channel of all matrix elements: <programlisting><codeline><highlight class="normal">Mat<sp/>image(1920,<sp/>1080,<sp/>CV_8UC3);</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>cv::Point3_&lt;uint8_t&gt;<sp/>Pixel;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">//<sp/>first.<sp/>raw<sp/>pointer<sp/>access.</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>image.rows;<sp/>++r)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Pixel*<sp/>ptr<sp/>=<sp/>image.ptr&lt;Pixel&gt;(r,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>Pixel*<sp/>ptr_end<sp/>=<sp/>ptr<sp/>+<sp/>image.cols;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>ptr<sp/>!=<sp/>ptr_end;<sp/>++ptr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;x<sp/>=<sp/>255;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">//<sp/>Using<sp/>MatIterator.<sp/>(Simple<sp/>but<sp/>there<sp/>are<sp/>a<sp/>Iterator's<sp/>overhead)</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(Pixel<sp/>&amp;p<sp/>:<sp/>cv::Mat_&lt;Pixel&gt;(image))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>255;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">//<sp/>Parallel<sp/>execution<sp/>with<sp/>function<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>Operator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>operator<sp/>()(Pixel<sp/>&amp;pixel,<sp/>const<sp/>int<sp/>*<sp/>position)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel.x<sp/>=<sp/>255;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">image.forEach&lt;Pixel&gt;(Operator());</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">//<sp/>Parallel<sp/>execution<sp/>using<sp/>C++11<sp/>lambda.</highlight></codeline>
<codeline><highlight class="normal">image.forEach&lt;Pixel&gt;([](Pixel<sp/>&amp;p,<sp/>const<sp/>int<sp/>*<sp/>position)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>255;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> Example 2. Using the pixel's position: <programlisting><codeline><highlight class="normal">//<sp/>Creating<sp/>3D<sp/>matrix<sp/>(255<sp/>x<sp/>255<sp/>x<sp/>255)<sp/>typed<sp/>uint8_t</highlight></codeline>
<codeline><highlight class="normal">//<sp/>and<sp/>initialize<sp/>all<sp/>elements<sp/>by<sp/>the<sp/>value<sp/>which<sp/>equals<sp/>elements<sp/>position.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>i.e.<sp/>pixels<sp/>(x,y,z)<sp/>=<sp/>(1,2,3)<sp/>is<sp/>(b,g,r)<sp/>=<sp/>(1,2,3).</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">int<sp/>sizes[]<sp/>=<sp/>{<sp/>255,<sp/>255,<sp/>255<sp/>};</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>cv::Point3_&lt;uint8_t&gt;<sp/>Pixel;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">Mat_&lt;Pixel&gt;<sp/>image<sp/>=<sp/>Mat::zeros(3,<sp/>sizes,<sp/>CV_8UC3);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal">image.forEach&lt;Pixel&gt;([&amp;](Pixel&amp;<sp/>pixel,<sp/>const<sp/>int<sp/>position[])<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pixel.x<sp/>=<sp/>position[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pixel.y<sp/>=<sp/>position[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pixel.z<sp/>=<sp/>position[2];</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2066" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1afcee31e71fd6991148fd3bb619971e2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Mat::forEach</definition>
        <argsstring>(const Functor &amp;operation) const</argsstring>
        <name>forEach</name>
        <param>
          <type>const Functor &amp;</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6df360cd5a78aa8a3fcf2d445b7e7764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/d45/classcv_1_1UMat" kindref="compound">UMat</ref></type>
        <definition>UMat cv::Mat::getUMat</definition>
        <argsstring>(AccessFlag accessFlags, UMatUsageFlags usageFlags=USAGE_DEFAULT) const</argsstring>
        <name>getUMat</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga6226c29c7b0e7bda7aff72e96ba8e1df" kindref="member">AccessFlag</ref></type>
          <declname>accessFlags</declname>
        </param>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga5681439dda418431eb0a672697135ed2" kindref="member">UMatUsageFlags</ref></type>
          <declname>usageFlags</declname>
          <defval><ref refid="dc/d84/group__core__basic_1gga5681439dda418431eb0a672697135ed2ae383b08ee18b73d8c1588d968f953893" kindref="member">USAGE_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>retrieve <ref refid="d7/d45/classcv_1_1UMat" kindref="compound">UMat</ref> from <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1066" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a039eb3c6740a850696a12519a4b8bfc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>MatExpr cv::Mat::inv</definition>
        <argsstring>(int method=DECOMP_LU) const</argsstring>
        <name>inv</name>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval><ref refid="d2/de8/group__core__array_1ggaaf9ea5dcc392d5ae04eacb9920b9674ca247a3455cd64973152e17e26999dc024" kindref="member">DECOMP_LU</ref></defval>
        </param>
        <briefdescription>
<para>Inverses a matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The method performs a matrix inversion by means of matrix expressions. This means that a temporary matrix inversion object is returned by the method and can be used further as a part of more complex matrix expressions or can be assigned to a matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix inversion method. One of <ref refid="d2/de8/group__core__array_1gaaf9ea5dcc392d5ae04eacb9920b9674c" kindref="member">cv::DecompTypes</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa90cea495029c7d1ee0a41361ccecdf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cv::Mat::isContinuous</definition>
        <argsstring>() const</argsstring>
        <name>isContinuous</name>
        <briefdescription>
<para>Reports whether the matrix is continuous or not. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns true if the matrix elements are stored continuously without gaps at the end of each row. Otherwise, it returns false. Obviously, 1x1 or 1xN matrices are always continuous. Matrices created with <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">Mat::create</ref> are always continuous. But if you extract a part of the matrix using <ref refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" kindref="member">Mat::col</ref>, <ref refid="d3/d63/classcv_1_1Mat_1a024cc0510a4c61c7f266d4ab9fe13d7a" kindref="member">Mat::diag</ref>, and so on, or constructed a matrix header for externally allocated data, such matrices may no longer have this property.</para><para>The continuity flag is stored as a bit in the <ref refid="d3/d63/classcv_1_1Mat_1af9333f06c84f115fda4cdf3af18c2ad0" kindref="member">Mat::flags</ref> field and is computed automatically when you construct a matrix header. Thus, the continuity check is a very fast operation, though theoretically it could be done as follows: <programlisting><codeline><highlight class="normal">//<sp/>alternative<sp/>implementation<sp/>of<sp/>Mat::isContinuous()</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>myCheckMatContinuity(const<sp/>Mat&amp;<sp/>m)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//return<sp/>(m.flags<sp/>&amp;<sp/>Mat::CONTINUOUS_FLAG)<sp/>!=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>m.rows<sp/>==<sp/>1<sp/>||<sp/>m.step<sp/>==<sp/>m.cols*m.elemSize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The method is used in quite a few of OpenCV functions. The point is that element-wise operations (such as arithmetic and logical operations, math functions, alpha blending, color space transformations, and others) do not depend on the image geometry. Thus, if all the input and output arrays are continuous, the functions can process them as very long single-row vectors. The example below illustrates how an alpha-blending function can be implemented: <programlisting><codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>alphaBlendRGBA(const<sp/>Mat&amp;<sp/>src1,<sp/>const<sp/>Mat&amp;<sp/>src2,<sp/>Mat&amp;<sp/>dst)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>float<sp/>alpha_scale<sp/>=<sp/>(float)std::numeric_limits&lt;T&gt;::max(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv_scale<sp/>=<sp/>1.f/alpha_scale;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CV_Assert(<sp/>src1.type()<sp/>==<sp/>src2.type()<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src1.type()<sp/>==<sp/>CV_MAKETYPE(traits::Depth&lt;T&gt;::value,<sp/>4)<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src1.size()<sp/>==<sp/>src2.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>size<sp/>=<sp/>src1.size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dst.create(size,<sp/>src1.type());</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>here<sp/>is<sp/>the<sp/>idiom:<sp/>check<sp/>the<sp/>arrays<sp/>for<sp/>continuity<sp/>and,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>if<sp/>this<sp/>is<sp/>the<sp/>case,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>treat<sp/>the<sp/>arrays<sp/>as<sp/>1D<sp/>vectors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(<sp/>src1.isContinuous()<sp/>&amp;&amp;<sp/>src2.isContinuous()<sp/>&amp;&amp;<sp/>dst.isContinuous()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size.width<sp/>*=<sp/>size.height;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size.height<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size.width<sp/>*=<sp/>4;</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size.height;<sp/>i++<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>when<sp/>the<sp/>arrays<sp/>are<sp/>continuous,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>outer<sp/>loop<sp/>is<sp/>executed<sp/>only<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T*<sp/>ptr1<sp/>=<sp/>src1.ptr&lt;T&gt;(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T*<sp/>ptr2<sp/>=<sp/>src2.ptr&lt;T&gt;(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>dptr<sp/>=<sp/>dst.ptr&lt;T&gt;(i);</highlight></codeline>
<codeline/>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size.width;<sp/>j<sp/>+=<sp/>4<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>alpha<sp/>=<sp/>ptr1[j+3]*inv_scale,<sp/>beta<sp/>=<sp/>ptr2[j+3]*inv_scale;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dptr[j]<sp/>=<sp/>saturate_cast&lt;T&gt;(ptr1[j]*alpha<sp/>+<sp/>ptr2[j]*beta);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dptr[j+1]<sp/>=<sp/>saturate_cast&lt;T&gt;(ptr1[j+1]*alpha<sp/>+<sp/>ptr2[j+1]*beta);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dptr[j+2]<sp/>=<sp/>saturate_cast&lt;T&gt;(ptr1[j+2]*alpha<sp/>+<sp/>ptr2[j+2]*beta);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dptr[j+3]<sp/>=<sp/>saturate_cast&lt;T&gt;((1<sp/>-<sp/>(1-alpha)*(1-beta))*alpha_scale);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> This approach, while being very simple, can boost the performance of a simple element-operation by 10-20 percents, especially if the image is rather small and the operation is quite simple.</para><para>Another OpenCV idiom in this function, a call of <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">Mat::create</ref> for the destination array, that allocates the destination array unless it already has the proper size and type. And while the newly allocated arrays are always continuous, you still need to check the destination array because <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">Mat::create</ref> does not always allocate a new matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ab34367822008627e80e144d7bba3bd70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cv::Mat::isSubmatrix</definition>
        <argsstring>() const</argsstring>
        <name>isSubmatrix</name>
        <briefdescription>
<para>returns true if the matrix is a submatrix of another matrix </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1725" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::locateROI</definition>
        <argsstring>(Size &amp;wholeSize, Point &amp;ofs) const</argsstring>
        <name>locateROI</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref> &amp;</type>
          <declname>wholeSize</declname>
        </param>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga1e83eafb2d26b3c93f09e8338bcab192" kindref="member">Point</ref> &amp;</type>
          <declname>ofs</declname>
        </param>
        <briefdescription>
<para>Locates the matrix header within a parent matrix. </para>        </briefdescription>
        <detaileddescription>
<para>After you extracted a submatrix from a matrix using <ref refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" kindref="member">Mat::row</ref>, <ref refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" kindref="member">Mat::col</ref>, <ref refid="d3/d63/classcv_1_1Mat_1aa6542193430356ad631a9beabc624107" kindref="member">Mat::rowRange</ref>, <ref refid="d3/d63/classcv_1_1Mat_1aadc8f9210fe4dec50513746c246fa8d9" kindref="member">Mat::colRange</ref>, and others, the resultant submatrix points just to the part of the original big matrix. However, each submatrix contains information (represented by datastart and dataend fields) that helps reconstruct the original matrix size and the position of the extracted submatrix within the original matrix. The method locateROI does exactly that. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wholeSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter that contains the size of the whole matrix containing <emphasis>this</emphasis> as a part. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter that contains an offset of <emphasis>this</emphasis> inside the whole matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a385c09827713dc3e6d713bfad8460706" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>MatExpr cv::Mat::mul</definition>
        <argsstring>(InputArray m, double scale=1) const</argsstring>
        <name>mul</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba" kindref="member">InputArray</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Performs an element-wise multiplication or division of the two matrices. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns a temporary object encoding per-element array multiplication, with optional scale. Note that this is not a matrix multiplication that corresponds to a simpler "\*" operator.</para><para>Example: <programlisting><codeline><highlight class="normal">Mat<sp/>C<sp/>=<sp/>A.mul(5/B);<sp/>//<sp/>equivalent<sp/>to<sp/>divide(A,<sp/>B,<sp/>C,<sp/>5)</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Another array of the same type and the same size as *this, or a matrix expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional scale factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a75b1b5424cf014f00d8f06ba1818a5d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>m</declname>
            <defname>m</defname>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::operator Matx&lt; _Tp, m, n &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator Matx&lt; _Tp, m, n &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a3896b518731a7a1e9cbf59aef1168734" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>_Nm</declname>
            <defname>_Nm</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::operator std::array&lt; _Tp, _Nm &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator std::array&lt; _Tp, _Nm &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a5d043937e7a4cad632397a9dd8dfee2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::operator std::vector&lt; _Tp &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator std::vector&lt; _Tp &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ae4766cf75071f4e4db698c4120abe57b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>cv::Mat::operator Vec&lt; _Tp, n &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator Vec&lt; _Tp, n &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ad543b6bd296ae1247032c750af4718e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::operator()</definition>
        <argsstring>(Range rowRange, Range colRange) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref></type>
          <declname>rowRange</declname>
        </param>
        <param>
          <type><ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref></type>
          <declname>colRange</declname>
        </param>
        <briefdescription>
<para>Extracts a rectangular submatrix. </para>        </briefdescription>
        <detaileddescription>
<para>The operators make a new header for the specified sub-array of *this . They are the most generalized forms of <ref refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" kindref="member">Mat::row</ref>, <ref refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" kindref="member">Mat::col</ref>, <ref refid="d3/d63/classcv_1_1Mat_1aa6542193430356ad631a9beabc624107" kindref="member">Mat::rowRange</ref>, and <ref refid="d3/d63/classcv_1_1Mat_1aadc8f9210fe4dec50513746c246fa8d9" kindref="member">Mat::colRange</ref> . For example, <computeroutput>A(Range(0, 10), <ref refid="da/d35/classcv_1_1Range_1af5a0207f6f98a69077db8e77898abc0f" kindref="member">Range::all()</ref>)</computeroutput> is equivalent to <computeroutput>A.rowRange(0, 10)</computeroutput>. Similarly to all of the above, the operators are O(1) operations, that is, no matrix data is copied. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowRange</parametername>
</parameternamelist>
<parameterdescription>
<para>Start and end row of the extracted submatrix. The upper boundary is not included. To select all the rows, use <ref refid="da/d35/classcv_1_1Range_1af5a0207f6f98a69077db8e77898abc0f" kindref="member">Range::all()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colRange</parametername>
</parameternamelist>
<parameterdescription>
<para>Start and end column of the extracted submatrix. The upper boundary is not included. To select all the columns, use <ref refid="da/d35/classcv_1_1Range_1af5a0207f6f98a69077db8e77898abc0f" kindref="member">Range::all()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a4272fce43d7405603fbb5e5f52580e57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::operator()</definition>
        <argsstring>(const Rect &amp;roi) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga11d95de507098e90bad732b9345402e8" kindref="member">Rect</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>roi</parametername>
</parameternamelist>
<parameterdescription>
<para>Extracted submatrix specified as a rectangle. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aee56475f834069b1fad3877c0747aaeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::operator()</definition>
        <argsstring>(const Range *ranges) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> *</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ranges</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of selected ranges along each array dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa9bf4fcbb6e854a6db7b7254a205fac9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::operator()</definition>
        <argsstring>(const std::vector&lt; Range &gt; &amp;ranges) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::vector&lt; <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ranges</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of selected ranges along each array dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aed1f81fe7efaacc2bd95149cdfa34302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>assignment operators </para>        </briefdescription>
        <detaileddescription>
<para>These are available assignment operators. Since they all are very different, make sure to read the operator parameters description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigned, right-hand-side matrix. Matrix assignment is an O(1) operation. This means that no data is copied but the data is shared and the reference counter, if any, is incremented. Before assigning new data, the old data is de-referenced via <ref refid="d3/d63/classcv_1_1Mat_1ae48d4913285518e2c21a3457017e716e" kindref="member">Mat::release</ref> . </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1054" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a2a0798475170fb3a23b5bc63686de334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(const MatExpr &amp;expr)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigned matrix expression object. As opposite to the first form of the assignment operation, the second form can reuse already allocated matrix if it has the right size and type to fit the matrix expression result. It is automatically handled by the real function that the matrix expressions is expanded to. For example, C=A+B is expanded to add(A, B, C), and add takes care of automatic C reallocation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1063" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(const Scalar &amp;s)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb" kindref="member">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets all or some of the array elements to the specified value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigned scalar converted to the actual array type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a86d190d68dbd801a2bd555d0905979fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(Mat &amp;&amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2071" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a88bbb01901fdfe3f1d0592c592e8757c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::pop_back</definition>
        <argsstring>(size_t nelems=1)</argsstring>
        <name>pop_back</name>
        <param>
          <type>size_t</type>
          <declname>nelems</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Removes elements from the bottom of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The method removes one or more rows from the bottom of the matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nelems</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of removed rows. If it is greater than the total number of rows, an exception is thrown. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a13acd320291229615ef15f96ff1ff738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::ptr</definition>
        <argsstring>(int i0=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a pointer to the specified matrix row. </para>        </briefdescription>
        <detaileddescription>
<para>The methods return <computeroutput>uchar*</computeroutput> or typed pointer to the specified matrix row. See the sample in <ref refid="d3/d63/classcv_1_1Mat_1aa90cea495029c7d1ee0a41361ccecdf3" kindref="member">Mat::isContinuous</ref> to know how to use these methods. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>A 0-based row index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1af13f821918f452657f53bc3f750323cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::ptr</definition>
        <argsstring>(int i0=0) const</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1827" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1af774caab4a38c6f7890f3254ad71eccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::ptr</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1833" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1abcfcc1798528b49495e1263eab31127d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::ptr</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ad2bc0c6a23243540e16607868c17be92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::ptr</definition>
        <argsstring>(int i0, int i1, int i2)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1abfb233ffa8b26a78c36e733f61da2a3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::ptr</definition>
        <argsstring>(int i0, int i1, int i2) const</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ab0e3de187bb27c384269b243e8789ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::ptr</definition>
        <argsstring>(const int *idx)</argsstring>
        <name>ptr</name>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a3ef72b9ebc9581796ed68382df8fb064" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::ptr</definition>
        <argsstring>(const int *idx) const</argsstring>
        <name>ptr</name>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1848" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a7ce1d8cc9a83ae7cab79766d0eb6c0a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::ptr</definition>
        <argsstring>(const Vec&lt; int, n &gt; &amp;idx)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; int, n &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1850" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a9ea1a1bfbbb2393a4e162230dccbe1f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type>const <ref refid="d1/d1b/group__core__hal__interface_1ga65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::ptr</definition>
        <argsstring>(const Vec&lt; int, n &gt; &amp;idx) const</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; int, n &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1852" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a5a9ffc908ac90604f36a8b6a1038747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>_Tp* cv::Mat::ptr</definition>
        <argsstring>(int i0=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1855" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6a6b3696440fe48751bfe60fe2a729f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp *</type>
        <definition>const _Tp* cv::Mat::ptr</definition>
        <argsstring>(int i0=0) const</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6f4278ede80e7a9fe55d8b03710e2343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>_Tp* cv::Mat::ptr</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1abda2b96aa438a808b43425040a7da81a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp *</type>
        <definition>const _Tp* cv::Mat::ptr</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the dimension 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1867" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a2bf43f93c5cb610b657bd6e0e091c062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>_Tp* cv::Mat::ptr</definition>
        <argsstring>(int i0, int i1, int i2)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a476f18d2b8d99748005150b24752512d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp *</type>
        <definition>const _Tp* cv::Mat::ptr</definition>
        <argsstring>(int i0, int i1, int i2) const</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1871" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a7cb2719706bcae72d26dbc9b2fdc02e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>_Tp* cv::Mat::ptr</definition>
        <argsstring>(const int *idx)</argsstring>
        <name>ptr</name>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ac30da0a78cd38a72e8902f52660e2543" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp *</type>
        <definition>const _Tp* cv::Mat::ptr</definition>
        <argsstring>(const int *idx) const</argsstring>
        <name>ptr</name>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1875" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a36ab9a1de78fd00a4f9acf3c8a5d4d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>_Tp* cv::Mat::ptr</definition>
        <argsstring>(const Vec&lt; int, n &gt; &amp;idx)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; int, n &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1877" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a15cac608c7a27fb961a81b9409aaa7e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type>const _Tp *</type>
        <definition>const _Tp* cv::Mat::ptr</definition>
        <argsstring>(const Vec&lt; int, n &gt; &amp;idx) const</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="d6/dcf/classcv_1_1Vec" kindref="compound">Vec</ref>&lt; int, n &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1af4bd5c2cb936dd363816d867aab22a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Mat::push_back</definition>
        <argsstring>(const _Tp &amp;elem)</argsstring>
        <name>push_back</name>
        <param>
          <type>const _Tp &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Adds elements to the bottom of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The methods add one or more elements to the bottom of the matrix. They emulate the corresponding method of the STL vector class. When elem is <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> , its type and the number of columns must be the same as in the container matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Added element(s). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a1cfeb3a75570697426971403fc1ddb0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Mat::push_back</definition>
        <argsstring>(const Mat_&lt; _Tp &gt; &amp;elem)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="df/dfc/classcv_1_1Mat__" kindref="compound">Mat_</ref>&lt; _Tp &gt; &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Added element(s). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6fc040ee744749ba434fd5806ce2e3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Mat::push_back</definition>
        <argsstring>(const std::vector&lt; _Tp &gt; &amp;elem)</argsstring>
        <name>push_back</name>
        <param>
          <type>const std::vector&lt; _Tp &gt; &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Added element(s). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a3676bae1741459eda3771e8653357c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::push_back</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Added line(s). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a57c658e2a97dda24fef1be2e625da914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::push_back_</definition>
        <argsstring>(const void *elem)</argsstring>
        <name>push_back_</name>
        <param>
          <type>const void *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>internal function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ae48d4913285518e2c21a3457017e716e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Decrements the reference counter and deallocates the matrix if needed. </para>        </briefdescription>
        <detaileddescription>
<para>The method decrements the reference counter associated with the matrix data. When the reference counter reaches 0, the matrix data is deallocated and the data and the reference counter pointers are set to NULL's. If the matrix header points to an external data set (see <ref refid="d3/d63/classcv_1_1Mat_1af1d014cecd1510cdf580bf2ed7e5aafc" kindref="member">Mat::Mat</ref> ), the reference counter is NULL, and the method has no effect in this case.</para><para>This method can be called manually to force the matrix data deallocation. But since this method is automatically called in the destructor, or by any other method that changes the data pointer, it is usually not needed. The reference counter decrement and check for 0 is an atomic operation on the platforms that support it. Thus, it is safe to operate on the same matrices asynchronously in different threads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a0706ed6c42e288926c5ad415b976bbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::reserve</definition>
        <argsstring>(size_t sz)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Reserves space for the certain number of rows. </para>        </briefdescription>
        <detaileddescription>
<para>The method reserves space for sz rows. If the matrix already has enough space to store sz rows, nothing happens. If the matrix is reallocated, the first <ref refid="d3/d63/classcv_1_1Mat_1abed816466c45234254d25bc59c31245e" kindref="member">Mat::rows</ref> rows are preserved. The method emulates the corresponding method of the STL vector class. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a923eead22fe7f0c48aa000158df920f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::reserveBuffer</definition>
        <argsstring>(size_t sz)</argsstring>
        <name>reserveBuffer</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Reserves space for the certain number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para>The method reserves space for sz bytes. If the matrix already has enough space to store sz bytes, nothing happens. If matrix has to be reallocated its previous content could be lost. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a4eb96e3251417fa88b78e2abd6cfd7d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::reshape</definition>
        <argsstring>(int cn, int rows=0) const</argsstring>
        <name>reshape</name>
        <param>
          <type>int</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Changes the shape and/or the number of channels of a 2D matrix without copying the data. </para>        </briefdescription>
        <detaileddescription>
<para>The method makes a new matrix header for *this elements. The new matrix may have a different size and/or different number of channels. Any combination is possible if:<itemizedlist>
<listitem><para>No extra elements are included into the new matrix and no elements are excluded. Consequently, the product rows*cols*channels() must stay the same after the transformation.</para></listitem><listitem><para>No data is copied. That is, this is an O(1) operation. Consequently, if you change the number of rows, or the operation changes the indices of elements row in some other way, the matrix must be continuous. See <ref refid="d3/d63/classcv_1_1Mat_1aa90cea495029c7d1ee0a41361ccecdf3" kindref="member">Mat::isContinuous</ref> .</para></listitem></itemizedlist>
</para><para>For example, if there is a set of 3D points stored as an STL vector, and you want to represent the points as a 3xN matrix, do the following: <programlisting><codeline><highlight class="normal">std::vector&lt;Point3f&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>pointMat<sp/>=<sp/>Mat(vec).<sp/>//<sp/>convert<sp/>vector<sp/>to<sp/>Mat,<sp/>O(1)<sp/>operation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reshape(1).<sp/>//<sp/>make<sp/>Nx3<sp/>1-channel<sp/>matrix<sp/>out<sp/>of<sp/>Nx1<sp/>3-channel.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Also,<sp/>an<sp/>O(1)<sp/>operation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t();<sp/>//<sp/>finally,<sp/>transpose<sp/>the<sp/>Nx3<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>involves<sp/>copying<sp/>all<sp/>the<sp/>elements</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cn</parametername>
</parameternamelist>
<parameterdescription>
<para>New number of channels. If the parameter is 0, the number of channels remains the same. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>New number of rows. If the parameter is 0, the number of rows remains the same. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a50e606fe51f53b896b66051634a018fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::reshape</definition>
        <argsstring>(int cn, int newndims, const int *newsz) const</argsstring>
        <name>reshape</name>
        <param>
          <type>int</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>newsz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ab2e41a510891e548f744832cf9b8ab89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::reshape</definition>
        <argsstring>(int cn, const std::vector&lt; int &gt; &amp;newshape) const</argsstring>
        <name>reshape</name>
        <param>
          <type>int</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>newshape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1ad0127b138acfcc2dcd5dafc51175b309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::resize</definition>
        <argsstring>(size_t sz)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Changes the number of matrix rows. </para>        </briefdescription>
        <detaileddescription>
<para>The methods change the number of matrix rows. If the matrix is reallocated, the first min(Mat::rows, sz) rows are preserved. The methods emulate the corresponding methods of the STL vector class. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>New number of rows. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1abdbf4852beb3af95977fa289f6c7034c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::resize</definition>
        <argsstring>(size_t sz, const Scalar &amp;s)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d84/group__core__basic_1ga599fe92e910c027be274233eccad7beb" kindref="member">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>New number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Value assigned to the newly added elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::row</definition>
        <argsstring>(int y) const</argsstring>
        <name>row</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Creates a matrix header for the specified matrix row. </para>        </briefdescription>
        <detaileddescription>
<para>The method makes a new header for the specified matrix row and returns it. This is an O(1) operation, regardless of the matrix size. The underlying data of the new matrix is shared with the original matrix. Here is the example of one of the classical basic matrix processing operations, axpy, used by LU and many other algorithms: <programlisting><codeline><highlight class="normal">inline<sp/>void<sp/>matrix_axpy(Mat&amp;<sp/>A,<sp/>int<sp/>i,<sp/>int<sp/>j,<sp/>double<sp/>alpha)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A.row(i)<sp/>+=<sp/>A.row(j)*alpha;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="note"><para>In the current implementation, the following code does not work as expected: <programlisting><codeline><highlight class="normal">Mat<sp/>A;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">A.row(i)<sp/>=<sp/>A.row(j);<sp/>//<sp/>will<sp/>not<sp/>work</highlight></codeline>
</programlisting> This happens because A.row(i) forms a temporary header that is further assigned to another header. Remember that each of these operations is O(1), that is, no data is copied. Thus, the above assignment is not true if you may have expected the j-th row to be copied to the i-th row. To achieve that, you should either turn this simple assignment into an expression or use the <ref refid="d3/d63/classcv_1_1Mat_1a33fd5d125b4c302b0c9aa86980791a77" kindref="member">Mat::copyTo</ref> method: <programlisting><codeline><highlight class="normal">Mat<sp/>A;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>works,<sp/>but<sp/>looks<sp/>a<sp/>bit<sp/>obscure.</highlight></codeline>
<codeline><highlight class="normal">A.row(i)<sp/>=<sp/>A.row(j)<sp/>+<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>this<sp/>is<sp/>a<sp/>bit<sp/>longer,<sp/>but<sp/>the<sp/>recommended<sp/>method.</highlight></codeline>
<codeline><highlight class="normal">A.row(j).copyTo(A.row(i));</highlight></codeline>
</programlisting> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A 0-based row index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa6542193430356ad631a9beabc624107" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::rowRange</definition>
        <argsstring>(int startrow, int endrow) const</argsstring>
        <name>rowRange</name>
        <param>
          <type>int</type>
          <declname>startrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endrow</declname>
        </param>
        <briefdescription>
<para>Creates a matrix header for the specified row span. </para>        </briefdescription>
        <detaileddescription>
<para>The method makes a new header for the specified row span of the matrix. Similarly to <ref refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" kindref="member">Mat::row</ref> and <ref refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" kindref="member">Mat::col</ref> , this is an O(1) operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startrow</parametername>
</parameternamelist>
<parameterdescription>
<para>An inclusive 0-based start index of the row span. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endrow</parametername>
</parameternamelist>
<parameterdescription>
<para>An exclusive 0-based ending index of the row span. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6f5b8257ea38a26295944e9a69caf7e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::rowRange</definition>
        <argsstring>(const Range &amp;r) const</argsstring>
        <name>rowRange</name>
        <param>
          <type>const <ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="da/d35/classcv_1_1Range" kindref="compound">Range</ref> structure containing both the start and the end indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a0440e2a164c0b0d8462fb1e487be9876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::setTo</definition>
        <argsstring>(InputArray value, InputArray mask=noArray())</argsstring>
        <name>setTo</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba" kindref="member">InputArray</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga353a9de602fe76c709e12074a6f362ba" kindref="member">InputArray</ref></type>
          <declname>mask</declname>
          <defval><ref refid="dc/d84/group__core__basic_1gad9287b23bba2fed753b36ef561ae7346" kindref="member">noArray</ref>()</defval>
        </param>
        <briefdescription>
<para>Sets all or some of the array elements to the specified value. </para>        </briefdescription>
        <detaileddescription>
<para>This is an advanced variant of the <ref refid="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" kindref="member">Mat::operator=(const Scalar&amp; s)</ref> operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigned scalar converted to the actual array type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation mask of the same size as *this. Its non-zero elements indicate which matrix elements need to be copied. The mask has to be of type CV_8U and can have 1 or multiple channels </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a0066c8eee40c1706395b1e57f00e0857" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::step1</definition>
        <argsstring>(int i=0) const</argsstring>
        <name>step1</name>
        <param>
          <type>int</type>
          <declname>i</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a normalized step. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns a matrix step divided by <ref refid="d3/d63/classcv_1_1Mat_1a9acde8f32d4b294558fb406bc05171bc" kindref="member">Mat::elemSize1()</ref> . It can be useful to quickly access an arbitrary matrix element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aaa428c60ccb6d8ea5de18f63dfac8e11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>MatExpr cv::Mat::t</definition>
        <argsstring>() const</argsstring>
        <name>t</name>
        <briefdescription>
<para>Transposes a matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The method performs matrix transposition by means of matrix expressions. It does not perform the actual transposition but returns a temporary matrix transposition object that can be further used as a part of more complex matrix expressions or can be assigned to a matrix: <programlisting><codeline><highlight class="normal">Mat<sp/>A1<sp/>=<sp/>A<sp/>+<sp/>Mat::eye(A.size(),<sp/>A.type())*lambda;</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>C<sp/>=<sp/>A1.t()*A1;<sp/>//<sp/>compute<sp/>(A<sp/>+<sp/>lambda*I)^t<sp/>*<sp/>(A<sp/>+<sp/>lamda*I)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aa4d317d43fb0cba9c2503f3c61b866c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::total</definition>
        <argsstring>() const</argsstring>
        <name>total</name>
        <briefdescription>
<para>Returns the total number of array elements. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns the number of array elements (a number of pixels if the array represents an image). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a5c506fc8b2cf52375e0d8be26aae0df4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::total</definition>
        <argsstring>(int startDim, int endDim=INT_MAX) const</argsstring>
        <name>total</name>
        <param>
          <type>int</type>
          <declname>startDim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endDim</declname>
          <defval>INT_MAX</defval>
        </param>
        <briefdescription>
<para>Returns the total number of array elements. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns the number of elements within a certain sub-array slice with startDim &lt;= dim &lt; endDim </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1794" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1af2d2652e552d7de635988f18a84b53e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Returns the type of a matrix element. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns a matrix element type. This is an identifier compatible with the CvMat type system, like CV_16SC3 or 16-bit signed 3-channel array, and so on. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1746" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a3520c52cecff18ab7b243b2b45df7bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::updateContinuityFlag</definition>
        <argsstring>()</argsstring>
        <name>updateContinuityFlag</name>
        <briefdescription>
<para>internal use method: updates the continuity flag </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2103" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a0f81856dbcb93eae6113947edb3ea068" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref></type>
        <definition>static Mat cv::Mat::diag</definition>
        <argsstring>(const Mat &amp;d)</argsstring>
        <name>diag</name>
        <param>
          <type>const <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>creates a diagonal matrix </para>        </briefdescription>
        <detaileddescription>
<para>The method creates a square diagonal matrix from specified main diagonal. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>One-dimensional matrix that represents the main diagonal. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a2cf9b9acde7a9852542bbc20ef851ed2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::eye</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>eye</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns an identity matrix of the specified size and type. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns a Matlab-style identity matrix initializer, similarly to <ref refid="d3/d63/classcv_1_1Mat_1a0b57b6a326c8876d944d188a46e0f556" kindref="member">Mat::zeros</ref>. Similarly to <ref refid="d3/d63/classcv_1_1Mat_1a69ae0402d116fc9c71908d8508dc2f09" kindref="member">Mat::ones</ref>, you can use a scale operation to create a scaled identity matrix efficiently: <programlisting><codeline><highlight class="normal">//<sp/>make<sp/>a<sp/>4x4<sp/>diagonal<sp/>matrix<sp/>with<sp/>0.1's<sp/>on<sp/>the<sp/>diagonal.</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>A<sp/>=<sp/>Mat::eye(4,<sp/>4,<sp/>CV_32F)*0.1;</highlight></codeline>
</programlisting> <simplesect kind="note"><para>In case of multi-channels type, identity matrix will be initialized only for the first channel, the others will be set to 0's </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1aab87b56e1dc370ffe4afb735b6a1e5c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::eye</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>eye</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternative matrix size specification as Size(cols, rows) . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a8aee95197c1ad458b37539bf9943ea80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="df/d4c/classcv_1_1MatAllocator" kindref="compound">MatAllocator</ref> *</type>
        <definition>static MatAllocator* cv::Mat::getDefaultAllocator</definition>
        <argsstring>()</argsstring>
        <name>getDefaultAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a8d5dda7d818009547d71a086d3d755a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="df/d4c/classcv_1_1MatAllocator" kindref="compound">MatAllocator</ref> *</type>
        <definition>static MatAllocator* cv::Mat::getStdAllocator</definition>
        <argsstring>()</argsstring>
        <name>getStdAllocator</name>
        <briefdescription>
<para>and the standard allocator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2098" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a69ae0402d116fc9c71908d8508dc2f09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::ones</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>ones</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns an array of all 1's of the specified size and type. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns a Matlab-style 1's array initializer, similarly to <ref refid="d3/d63/classcv_1_1Mat_1a0b57b6a326c8876d944d188a46e0f556" kindref="member">Mat::zeros</ref>. Note that using this method you can initialize an array with an arbitrary value, using the following Matlab idiom: <programlisting><codeline><highlight class="normal">Mat<sp/>A<sp/>=<sp/>Mat::ones(100,<sp/>100,<sp/>CV_8U)*3;<sp/>//<sp/>make<sp/>100x100<sp/>matrix<sp/>filled<sp/>with<sp/>3.</highlight></codeline>
</programlisting> The above operation does not form a 100x100 matrix of 1's and then multiply it by 3. Instead, it just remembers the scale factor (3 in this case) and use it when actually invoking the matrix initializer. <simplesect kind="note"><para>In case of multi-channels type, only the first channel will be initialized with 1's, the others will be set to 0's. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1afc9c2c0b17ecd00932bc5fbc72f9bce0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::ones</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>ones</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternative to the matrix size specification Size(cols, rows) . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a6ed33f15d7bf0172efb62d61b3751284" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::ones</definition>
        <argsstring>(int ndims, const int *sz, int type)</argsstring>
        <name>ones</name>
        <param>
          <type>int</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Array dimensionality. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying the array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a536a771cbad0b8360091e0315ebfc524" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cv::Mat::setDefaultAllocator</definition>
        <argsstring>(MatAllocator *allocator)</argsstring>
        <name>setDefaultAllocator</name>
        <param>
          <type><ref refid="df/d4c/classcv_1_1MatAllocator" kindref="compound">MatAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a0b57b6a326c8876d944d188a46e0f556" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::zeros</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>zeros</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns a zero array of the specified size and type. </para>        </briefdescription>
        <detaileddescription>
<para>The method returns a Matlab-style zero array initializer. It can be used to quickly form a constant array as a function parameter, part of a matrix expression, or as a matrix initializer: <programlisting><codeline><highlight class="normal">Mat<sp/>A;</highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Mat::zeros(3,<sp/>3,<sp/>CV_32F);</highlight></codeline>
</programlisting> In the example above, a new matrix is allocated only if A is not a 3x3 floating-point matrix. Otherwise, the existing matrix A is filled with zeros. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a095db10924bc801644a29074a755b6e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::zeros</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>zeros</name>
        <param>
          <type><ref refid="dc/d84/group__core__basic_1ga346f563897249351a34549137c8532a0" kindref="member">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternative to the matrix size specification Size(cols, rows) . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/d63/classcv_1_1Mat_1a961cf7d4f82253d93bb5b8ff54522087" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref></type>
        <definition>static MatExpr cv::Mat::zeros</definition>
        <argsstring>(int ndims, const int *sz, int type)</argsstring>
        <name>zeros</name>
        <param>
          <type>int</type>
          <declname>ndims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndims</parametername>
</parameternamelist>
<parameterdescription>
<para>Array dimensionality. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers specifying the array shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Created matrix type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="1365" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="db/de0/group__core__utils_1gaa9eb8c7cba44b791827d0cd685206273" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Mat::forEach_impl</definition>
        <argsstring>(const Functor &amp;operation)</argsstring>
        <name>forEach_impl</name>
        <param>
          <type>const Functor &amp;</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>idx is modified in this-&gt;rowCall </para>        </inbodydescription>
        <location file="opencv2/core/mat.hpp" line="2112" column="1" bodyfile="opencv2/core/utility.hpp" bodystart="603" bodyend="696"/>
        <references refid="db/de0/group__core__utils_1gaf62bcd90f70e275191ab95136d85906b" compoundref="dd/d3c/base_8hpp" startline="342">CV_Assert</references>
        <references refid="df/d57/namespacecv_1_1dnn_1a65ad6cf1b64a572bf78d696d2014b0e6" compoundref="d1/ddb/shape__utils_8hpp" startline="151" endline="167">cv::dnn::total</references>
        <references refid="d2/d3c/group__core__opengl_1ggaf53526c205a92260f356fe6589460aaba8ea1de81114c3db43c9dfa96870367a0" compoundref="d4/db0/opengl_8hpp" startline="480">cv::ogl::LINES</references>
        <references refid="db/de0/group__core__utils_1ga4d89d63e402ef9ddc48e18e21180fe4a" compoundref="dc/dcc/cvdef_8h" startline="697">CV_OVERRIDE</references>
        <references refid="da/d35/classcv_1_1Range_1ad7ce51f1d8797236c97bec49d2b25522" compoundref="d6/d04/core_2include_2opencv2_2core_2types_8hpp" startline="598">cv::Range::start</references>
        <references refid="da/d35/classcv_1_1Range_1aba16789fec81858a31c9685d399b62fc" compoundref="d6/d04/core_2include_2opencv2_2core_2types_8hpp" startline="598">cv::Range::end</references>
        <references refid="db/de0/group__core__utils_1gaa42ec9937b847cb52a97c613fc894c4a">cv::parallel_for_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>n-dimensional dense array class </para>    </briefdescription>
    <detaileddescription>
<para><anchor id="d3/d63/classcv_1_1Mat_1CVMat_Details"/> The class <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> represents an n-dimensional dense numerical single-channel or multi-channel array. It can be used to store real or complex-valued vectors and matrices, grayscale or color images, voxel volumes, vector fields, point clouds, tensors, histograms (though, very high-dimensional histograms may be better stored in a <ref refid="dd/da9/classcv_1_1SparseMat" kindref="compound">SparseMat</ref> ). The data layout of the array <computeroutput>M</computeroutput> is defined by the array <computeroutput>M.step[]</computeroutput>, so that the address of element <formula id="24">$(i_0,...,i_{M.dims-1})$</formula>, where <formula id="25">$0\leq i_k&lt;M.size[k]$</formula>, is computed as: <formula id="26">\[addr(M_{i_0,...,i_{M.dims-1}}) = M.data + M.step[0]*i_0 + M.step[1]*i_1 + ... + M.step[M.dims-1]*i_{M.dims-1}\]</formula> In case of a 2-dimensional array, the above formula is reduced to: <formula id="27">\[addr(M_{i,j}) = M.data + M.step[0]*i + M.step[1]*j\]</formula> Note that <computeroutput>M.step[i] &gt;= M.step[i+1]</computeroutput> (in fact, <computeroutput>M.step[i] &gt;= M.step[i+1]*M.size[i+1]</computeroutput> ). This means that 2-dimensional matrices are stored row-by-row, 3-dimensional matrices are stored plane-by-plane, and so on. M.step[M.dims-1] is minimal and always equal to the element size M.elemSize() .</para><para>So, the data layout in <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> is compatible with the majority of dense array types from the standard toolkits and SDKs, such as Numpy (ndarray), Win32 (independent device bitmaps), and others, that is, with any array that uses <emphasis>steps</emphasis> (or <emphasis>strides</emphasis>) to compute the position of a pixel. Due to this compatibility, it is possible to make a <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> header for user-allocated data and process it in-place using OpenCV functions.</para><para>There are many different ways to create a <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> object. The most popular options are listed below:</para><para><itemizedlist>
<listitem><para>Use the create(nrows, ncols, type) method or the similar Mat(nrows, ncols, type[, fillValue]) constructor. A new array of the specified size and type is allocated. type has the same meaning as in the cvCreateMat method. For example, CV_8UC1 means a 8-bit single-channel array, CV_32FC2 means a 2-channel (complex) floating-point array, and so on. <programlisting><codeline><highlight class="normal">//<sp/>make<sp/>a<sp/>7x7<sp/>complex<sp/>matrix<sp/>filled<sp/>with<sp/>1+3j.</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>M(7,7,CV_32FC2,Scalar(1,3));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>and<sp/>now<sp/>turn<sp/>M<sp/>to<sp/>a<sp/>100x60<sp/>15-channel<sp/>8-bit<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>old<sp/>content<sp/>will<sp/>be<sp/>deallocated</highlight></codeline>
<codeline><highlight class="normal">M.create(100,60,CV_8UC(15));</highlight></codeline>
</programlisting> As noted in the introduction to this chapter, <ref refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" kindref="member">create()</ref> allocates only a new array when the shape or type of the current array are different from the specified ones.</para></listitem><listitem><para>Create a multi-dimensional array: <programlisting><codeline><highlight class="normal">//<sp/>create<sp/>a<sp/>100x100x100<sp/>8-bit<sp/>array</highlight></codeline>
<codeline><highlight class="normal">int<sp/>sz[]<sp/>=<sp/>{100,<sp/>100,<sp/>100};</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>bigCube(3,<sp/>sz,<sp/>CV_8U,<sp/>Scalar::all(0));</highlight></codeline>
</programlisting> It passes the number of dimensions =1 to the <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> constructor but the created array will be 2-dimensional with the number of columns set to 1. So, <ref refid="d3/d63/classcv_1_1Mat_1a39cf614aa52567e9a945cd2609bd767b" kindref="member">Mat::dims</ref> is always &gt;= 2 (can also be 0 when the array is empty).</para></listitem><listitem><para>Use a copy constructor or assignment operator where there can be an array or expression on the right side (see below). As noted in the introduction, the array assignment is an O(1) operation because it only copies the header and increases the reference counter. The <ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">Mat::clone()</ref> method can be used to get a full (deep) copy of the array when you need it.</para></listitem><listitem><para>Construct a header for a part of another array. It can be a single row, single column, several rows, several columns, rectangular region in the array (called a <emphasis>minor</emphasis> in algebra) or a diagonal. Such operations are also O(1) because the new header references the same data. You can actually modify a part of the array using this feature, for example: <programlisting><codeline><highlight class="normal">//<sp/>add<sp/>the<sp/>5-th<sp/>row,<sp/>multiplied<sp/>by<sp/>3<sp/>to<sp/>the<sp/>3rd<sp/>row</highlight></codeline>
<codeline><highlight class="normal">M.row(3)<sp/>=<sp/>M.row(3)<sp/>+<sp/>M.row(5)*3;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>now<sp/>copy<sp/>the<sp/>7-th<sp/>column<sp/>to<sp/>the<sp/>1-st<sp/>column</highlight></codeline>
<codeline><highlight class="normal">//<sp/>M.col(1)<sp/>=<sp/>M.col(7);<sp/>//<sp/>this<sp/>will<sp/>not<sp/>work</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>M1<sp/>=<sp/>M.col(1);</highlight></codeline>
<codeline><highlight class="normal">M.col(7).copyTo(M1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>create<sp/>a<sp/>new<sp/>320x240<sp/>image</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>img(Size(320,240),CV_8UC3);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>select<sp/>a<sp/>ROI</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>roi(img,<sp/>Rect(10,10,100,100));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>fill<sp/>the<sp/>ROI<sp/>with<sp/>(0,255,0)<sp/>(which<sp/>is<sp/>green<sp/>in<sp/>RGB<sp/>space);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>original<sp/>320x240<sp/>image<sp/>will<sp/>be<sp/>modified</highlight></codeline>
<codeline><highlight class="normal">roi<sp/>=<sp/>Scalar(0,255,0);</highlight></codeline>
</programlisting> Due to the additional datastart and dataend members, it is possible to compute a relative sub-array position in the main <emphasis>container</emphasis> array using <ref refid="d3/d63/classcv_1_1Mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96" kindref="member">locateROI()</ref>: <programlisting><codeline><highlight class="normal">Mat<sp/>A<sp/>=<sp/>Mat::eye(10,<sp/>10,<sp/>CV_32S);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>extracts<sp/>A<sp/>columns,<sp/>1<sp/>(inclusive)<sp/>to<sp/>3<sp/>(exclusive).</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>B<sp/>=<sp/>A(Range::all(),<sp/>Range(1,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>extracts<sp/>B<sp/>rows,<sp/>5<sp/>(inclusive)<sp/>to<sp/>9<sp/>(exclusive).</highlight></codeline>
<codeline><highlight class="normal">//<sp/>that<sp/>is,<sp/>C<sp/>\~<sp/>A(Range(5,<sp/>9),<sp/>Range(1,<sp/>3))</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>C<sp/>=<sp/>B(Range(5,<sp/>9),<sp/>Range::all());</highlight></codeline>
<codeline><highlight class="normal">Size<sp/>size;<sp/>Point<sp/>ofs;</highlight></codeline>
<codeline><highlight class="normal">C.locateROI(size,<sp/>ofs);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>size<sp/>will<sp/>be<sp/>(width=10,height=10)<sp/>and<sp/>the<sp/>ofs<sp/>will<sp/>be<sp/>(x=1,<sp/>y=5)</highlight></codeline>
</programlisting> As in case of whole matrices, if you need a deep copy, use the <computeroutput><ref refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" kindref="member">clone()</ref></computeroutput> method of the extracted sub-matrices.</para></listitem><listitem><para>Make a header for user-allocated data. It can be useful to do the following:<orderedlist>
<listitem><para>Process "foreign" data using OpenCV (for example, when you implement a DirectShow* filter or a processing module for gstreamer, and so on). For example: <programlisting><codeline><highlight class="normal">void<sp/>process_video_frame(const<sp/>unsigned<sp/>char*<sp/>pixels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>width,<sp/>int<sp/>height,<sp/>int<sp/>step)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>img(height,<sp/>width,<sp/>CV_8UC3,<sp/>pixels,<sp/>step);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GaussianBlur(img,<sp/>img,<sp/>Size(7,7),<sp/>1.5,<sp/>1.5);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></listitem><listitem><para>Quickly initialize small matrices and/or get a super-fast element access. <programlisting><codeline><highlight class="normal">double<sp/>m[3][3]<sp/>=<sp/>{{a,<sp/>b,<sp/>c},<sp/>{d,<sp/>e,<sp/>f},<sp/>{g,<sp/>h,<sp/>i}};</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>M<sp/>=<sp/>Mat(3,<sp/>3,<sp/>CV_64F,<sp/>m).inv();</highlight></codeline>
</programlisting></para></listitem></orderedlist>
</para></listitem><listitem><para>Use MATLAB-style array initializers, <ref refid="d3/d63/classcv_1_1Mat_1a0b57b6a326c8876d944d188a46e0f556" kindref="member">zeros()</ref>, <ref refid="d3/d63/classcv_1_1Mat_1a69ae0402d116fc9c71908d8508dc2f09" kindref="member">ones()</ref>, <ref refid="d3/d63/classcv_1_1Mat_1a2cf9b9acde7a9852542bbc20ef851ed2" kindref="member">eye()</ref>, for example: <programlisting><codeline><highlight class="normal">//<sp/>create<sp/>a<sp/>double-precision<sp/>identity<sp/>matrix<sp/>and<sp/>add<sp/>it<sp/>to<sp/>M.</highlight></codeline>
<codeline><highlight class="normal">M<sp/>+=<sp/>Mat::eye(M.rows,<sp/>M.cols,<sp/>CV_64F);</highlight></codeline>
</programlisting></para></listitem><listitem><para>Use a comma-separated initializer: <programlisting><codeline><highlight class="normal">//<sp/>create<sp/>a<sp/>3x3<sp/>double-precision<sp/>identity<sp/>matrix</highlight></codeline>
<codeline><highlight class="normal">Mat<sp/>M<sp/>=<sp/>(Mat_&lt;double&gt;(3,3)<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1);</highlight></codeline>
</programlisting> With this approach, you first call a constructor of the <ref refid="d3/d63/classcv_1_1Mat" kindref="compound">Mat</ref> class with the proper parameters, and then you just put <computeroutput>&lt;&lt; operator</computeroutput> followed by comma-separated values that can be constants, variables, expressions, and so on. Also, note the extra parentheses required to avoid compilation errors.</para></listitem></itemizedlist>
</para><para>Once the array is created, it is automatically managed via a reference-counting mechanism. If the array header is built on top of user-allocated data, you should handle the data by yourself. The array data is deallocated when no one points to it. If you want to release the data pointed by a array header before the array destructor is called, use <ref refid="d3/d63/classcv_1_1Mat_1ae48d4913285518e2c21a3457017e716e" kindref="member">Mat::release()</ref>.</para><para>The next important thing to learn about the array class is element access. This manual already described how to compute an address of each array element. Normally, you are not required to use the formula directly in the code. If you know the array element type (which can be retrieved using the method <ref refid="d3/d63/classcv_1_1Mat_1af2d2652e552d7de635988f18a84b53e5" kindref="member">Mat::type()</ref> ), you can access the element <formula id="28">$M_{ij}$</formula> of a 2-dimensional array as: <programlisting><codeline><highlight class="normal">M.at&lt;double&gt;(i,j)<sp/>+=<sp/>1.f;</highlight></codeline>
</programlisting> assuming that <computeroutput>M</computeroutput> is a double-precision floating-point array. There are several variants of the method at for a different number of dimensions.</para><para>If you need to process a whole row of a 2D array, the most efficient way is to get the pointer to the row first, and then just use the plain C operator [] : <programlisting><codeline><highlight class="normal">//<sp/>compute<sp/>sum<sp/>of<sp/>positive<sp/>matrix<sp/>elements</highlight></codeline>
<codeline><highlight class="normal">//<sp/>(assuming<sp/>that<sp/>M<sp/>is<sp/>a<sp/>double-precision<sp/>matrix)</highlight></codeline>
<codeline><highlight class="normal">double<sp/>sum=0;</highlight></codeline>
<codeline><highlight class="normal">for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>M.rows;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>double*<sp/>Mi<sp/>=<sp/>M.ptr&lt;double&gt;(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>M.cols;<sp/>j++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>std::max(Mi[j],<sp/>0.);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Some operations, like the one above, do not actually depend on the array shape. They just process elements of an array one by one (or elements from multiple arrays that have the same coordinates, for example, array addition). Such operations are called <emphasis>element-wise</emphasis>. It makes sense to check whether all the input/output arrays are continuous, namely, have no gaps at the end of each row. If yes, process them as a long single row: <programlisting><codeline><highlight class="normal">//<sp/>compute<sp/>the<sp/>sum<sp/>of<sp/>positive<sp/>matrix<sp/>elements,<sp/>optimized<sp/>variant</highlight></codeline>
<codeline><highlight class="normal">double<sp/>sum=0;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>cols<sp/>=<sp/>M.cols,<sp/>rows<sp/>=<sp/>M.rows;</highlight></codeline>
<codeline><highlight class="normal">if(M.isContinuous())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cols<sp/>*=<sp/>rows;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>double*<sp/>Mi<sp/>=<sp/>M.ptr&lt;double&gt;(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>cols;<sp/>j++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>std::max(Mi[j],<sp/>0.);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In case of the continuous matrix, the outer loop body is executed just once. So, the overhead is smaller, which is especially noticeable in case of small matrices.</para><para>Finally, there are STL-style iterators that are smart enough to skip gaps between successive rows: <programlisting><codeline><highlight class="normal">//<sp/>compute<sp/>sum<sp/>of<sp/>positive<sp/>matrix<sp/>elements,<sp/>iterator-based<sp/>variant</highlight></codeline>
<codeline><highlight class="normal">double<sp/>sum=0;</highlight></codeline>
<codeline><highlight class="normal">MatConstIterator_&lt;double&gt;<sp/>it<sp/>=<sp/>M.begin&lt;double&gt;(),<sp/>it_end<sp/>=<sp/>M.end&lt;double&gt;();</highlight></codeline>
<codeline><highlight class="normal">for(;<sp/>it<sp/>!=<sp/>it_end;<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>std::max(*it,<sp/>0.);</highlight></codeline>
</programlisting> The matrix iterators are random-access iterators, so they can be passed to any STL algorithm, including <ref refid="d2/de8/group__core__array_1ga45dd56da289494ce874be2324856898f" kindref="member">std::sort()</ref>.</para><para><simplesect kind="note"><para>Matrix Expressions and arithmetic see <ref refid="d1/d10/classcv_1_1MatExpr" kindref="compound">MatExpr</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2825">
        <label>cv::Mat_&lt; int &gt;</label>
        <childnode refid="2822" relation="template-instance">
          <edgelabel>&lt; int &gt;</edgelabel>
        </childnode>
        <childnode refid="2821" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2824">
        <label>cv::Mat_&lt; float &gt;</label>
        <link refid="df/dfc/classcv_1_1Mat__"/>
        <childnode refid="2822" relation="template-instance">
          <edgelabel>&lt; float &gt;</edgelabel>
        </childnode>
        <childnode refid="2821" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2823">
        <label>cv::Mat_&lt; double &gt;</label>
        <link refid="df/dfc/classcv_1_1Mat__"/>
        <childnode refid="2822" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
        <childnode refid="2821" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2826">
        <label>cv::Mat_&lt; uchar &gt;</label>
        <link refid="df/dfc/classcv_1_1Mat__"/>
        <childnode refid="2822" relation="template-instance">
          <edgelabel>&lt; uchar &gt;</edgelabel>
        </childnode>
        <childnode refid="2821" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2822">
        <label>cv::Mat_&lt; _Tp &gt;</label>
        <link refid="df/dfc/classcv_1_1Mat__"/>
        <childnode refid="2821" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2821">
        <label>cv::Mat</label>
        <link refid="d3/d63/classcv_1_1Mat"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2832">
        <label>size_t</label>
      </node>
      <node id="2835">
        <label>void *</label>
      </node>
      <node id="2830">
        <label>uchar *</label>
      </node>
      <node id="2829">
        <label>cv::UMatData</label>
        <link refid="db/d58/structcv_1_1UMatData"/>
        <childnode refid="2830" relation="usage">
          <edgelabel>+data</edgelabel>
          <edgelabel>+origdata</edgelabel>
        </childnode>
        <childnode refid="2831" relation="usage">
          <edgelabel>+flags</edgelabel>
        </childnode>
        <childnode refid="2829" relation="usage">
          <edgelabel>+originalUMatData</edgelabel>
        </childnode>
        <childnode refid="2832" relation="usage">
          <edgelabel>+size</edgelabel>
        </childnode>
        <childnode refid="2833" relation="usage">
          <edgelabel>+allocatorFlags_</edgelabel>
          <edgelabel>+refcount</edgelabel>
          <edgelabel>+urefcount</edgelabel>
          <edgelabel>+mapcount</edgelabel>
        </childnode>
        <childnode refid="2834" relation="usage">
          <edgelabel>+currAllocator</edgelabel>
          <edgelabel>+prevAllocator</edgelabel>
        </childnode>
        <childnode refid="2835" relation="usage">
          <edgelabel>+userdata</edgelabel>
          <edgelabel>+handle</edgelabel>
        </childnode>
      </node>
      <node id="2828">
        <label>unsigned char</label>
      </node>
      <node id="2834">
        <label>cv::MatAllocator</label>
        <link refid="df/d4c/classcv_1_1MatAllocator"/>
      </node>
      <node id="2833">
        <label>int</label>
      </node>
      <node id="2837">
        <label>cv::MatSize</label>
        <link refid="df/d63/structcv_1_1MatSize"/>
        <childnode refid="2833" relation="usage">
          <edgelabel>+p</edgelabel>
        </childnode>
      </node>
      <node id="2831">
        <label>MemoryFlag</label>
      </node>
      <node id="2836">
        <label>cv::MatStep</label>
        <link refid="d4/d26/structcv_1_1MatStep"/>
        <childnode refid="2832" relation="usage">
          <edgelabel>+p</edgelabel>
          <edgelabel>+buf</edgelabel>
        </childnode>
      </node>
      <node id="2827">
        <label>cv::Mat</label>
        <link refid="d3/d63/classcv_1_1Mat"/>
        <childnode refid="2828" relation="usage">
          <edgelabel>+data</edgelabel>
          <edgelabel>+datastart</edgelabel>
          <edgelabel>+datalimit</edgelabel>
          <edgelabel>+dataend</edgelabel>
        </childnode>
        <childnode refid="2829" relation="usage">
          <edgelabel>+u</edgelabel>
        </childnode>
        <childnode refid="2833" relation="usage">
          <edgelabel>+rows</edgelabel>
          <edgelabel>+dims</edgelabel>
          <edgelabel>+flags</edgelabel>
          <edgelabel>+cols</edgelabel>
        </childnode>
        <childnode refid="2836" relation="usage">
          <edgelabel>+step</edgelabel>
        </childnode>
        <childnode refid="2834" relation="usage">
          <edgelabel>+allocator</edgelabel>
        </childnode>
        <childnode refid="2837" relation="usage">
          <edgelabel>+size</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="opencv2/core/mat.hpp" line="792" column="1" bodyfile="opencv2/core/mat.hpp" bodystart="791" bodyend="2113"/>
    <listofallmembers>
      <member refid="d3/d63/classcv_1_1Mat_1a9d3794250e3dc39714f980b4d0d45864" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>addref</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2fece3507ee7e1284deee6da99e76b9b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>adjustROI</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a4d2eb7a536cd5a0f18808b6112111d6a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>allocator</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa8b3b4d7b9876a4726740b75daa98ddb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>assignTo</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa5d20fc86d41d59e4d71ae93daee9726" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a330d9adb78976b6efd4116c940924294" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac40425b84f60b39fd35e03814122661f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a5db6b18954e334048cb35752f49c6f8c" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a305829ed5c0ecfef7b44db18953048e8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a59c6c2d9db1cfba76d75addeeb4e6a84" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a474bd5cdcf986672cfdc304f6be1cf64" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2cbbb16670ae4d9aa747f19c24305213" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a9ec1aadc17ab8c8f8334d521719c7732" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a15c649a94cf2e06240b32b025231301f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a23cd599a27c59bae64b0c40ad645ea49" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a87d0b2e01b0f8686957398ecfb168a6d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a1c147538fd896f4f9abce9eaea9727e3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>AUTO_STEP</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a33ee3bc402827f587a5ad64b568d6986" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>begin</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aef8f88bc1f72757b0f2ddb3041611c73" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>begin</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa11336b9ac538e0475d840657ce164be" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>channels</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a167a8e0a3a3d86e84b70e33483af4466" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>checkVector</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1adff2ea98da45eae0833e73582dd4a660" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>clone</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a23df02a07ffbfa4aa59c19bc003919fe" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>col</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aadc8f9210fe4dec50513746c246fa8d9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>colRange</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1acccb63e44eba6ba81ead99881bd1997e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>colRange</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa3e5a47585c9ef6a0842556739155e3e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>cols</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a3a50403178ba15a9617f5ff341418cf9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>CONTINUOUS_FLAG</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1adf88c60c5b4980e05bb556080916978b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>convertTo</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a39fd9880fc55b7a0993bcfff88061ac4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>copySize</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a33fd5d125b4c302b0c9aa86980791a77" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>copyTo</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a626fe5f96d02525e2604d2ad46dd574f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>copyTo</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a55ced2c8d844d683ea9a725c60037ad0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>create</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a48409946d0e1bebb40fe765e18ec5eea" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>create</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aee53524ac61fa2ba441c4f29c3aca93f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>create</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a84f35d3923a92251631329eed66d2a12" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>create</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a708b761e0d15b7b8db4c8e8c95a7abe9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>cross</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a4d33bed1c850265370d2af0ff02e1564" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>data</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ae756e84c94cbcf4c152ed0e67edb71ca" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>dataend</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a21a0a0eb9814f0093452601fcbdc8a46" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>datalimit</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aeda6d607bfc629a95f59e7b538832172" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>datastart</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac6e9cdf9b450e360f005978b4e981b1a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>deallocate</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a8da9f853b6f3a29d738572fd1ffc44c0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>depth</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600a1454580da17d20c8ec5917170dc3da3a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>DEPTH_MASK</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a024cc0510a4c61c7f266d4ab9fe13d7a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>diag</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a0f81856dbcb93eae6113947edb3ea068" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>diag</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a39cf614aa52567e9a945cd2609bd767b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>dims</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a0f683eab191eeece33dfc64ae299a9cb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>dot</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aba7a5ef00b22b70668fba575005dfe55" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>elemSize</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a9acde8f32d4b294558fb406bc05171bc" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>elemSize1</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1abbec3525a852e77998aba034813fded4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>empty</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a9dd628eeccedea6e181ca54d41830a62" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>end</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a092f54359c99e42729715024fc662182" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>end</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2cf9b9acde7a9852542bbc20ef851ed2" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>eye</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aab87b56e1dc370ffe4afb735b6a1e5c9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>eye</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af9333f06c84f115fda4cdf3af18c2ad0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>flags</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a952ef1a85d70a510240cb645a90efc0d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>forEach</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1afcee31e71fd6991148fd3bb619971e2b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>forEach</name></member>
      <member refid="db/de0/group__core__utils_1gaa9eb8c7cba44b791827d0cd685206273" prot="protected" virt="non-virtual"><scope>cv::Mat</scope><name>forEach_impl</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a8aee95197c1ad458b37539bf9943ea80" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>getDefaultAllocator</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a8d5dda7d818009547d71a086d3d755a7" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>getStdAllocator</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6df360cd5a78aa8a3fcf2d445b7e7764" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>getUMat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a039eb3c6740a850696a12519a4b8bfc6" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>inv</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa90cea495029c7d1ee0a41361ccecdf3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>isContinuous</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ab34367822008627e80e144d7bba3bd70" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>isSubmatrix</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a40b5b3371a9c2a4b2b8ce0c8068d7c96" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>locateROI</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600a1b2031796886cd80edd90640bc17fb50" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>MAGIC_MASK</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a2082a2faa4b65dedcc5b84433c97f817" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>MAGIC_VAL</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af1d014cecd1510cdf580bf2ed7e5aafc" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2ec3402f7d165ca34c7fd6e8498a62ca" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a75a97b1e4e55f380c172af58048a7cde" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a3620c370690b5ca4d40c767be6fb4ceb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a286371a6196eaaaf0b86e158590460b7" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a156df5a1326dd5c30b187b0e721a5f57" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6adc4d64db5379bcbb713e71c9292f6e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1afbf34be80b7443123b2a032a67c3c4e3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ad20a78b5501fc39543a240142a40e234" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a294eaf8a95d2f9c7be19ff594d06278e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a51615ebf17a64c968df0bf49b4de6a3a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a9fa74fb14362d87cb183453d2441948f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a5fafc033e089143062fd31015b5d0f40" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a922de793eabcec705b3579c5f95a643e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a92a3e9e5911a2eb0cf0950a0a9670c76" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa7ec97373406215f2d4bc72cc1d27036" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1afde22a742fc73c0a150a9002310ac2eb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa6e903a6c762478692791a33d233019b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a23b182c4ffd46abe38f460c1480ae887" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1afccd5d581d7dc205925debf83ea4c7be" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a174d591e68a4876f7164aefb1f3551d5" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af831f6ce5e9ff546682e8155b5c835b1" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a507e01fb48b34a3e5c45f9f5b00725e8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a37068a8d9acc7cc5af817eb82b2aa83b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a224477889ddc7424aaab1b76e7682ea2" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a7d72610ed5aed9117eb7933a97670309" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a23957ae2fed348c67952c0d69c873972" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa82eca82664985c81c7912b04549370d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1adcaeb226bafeff8a1b262f57f6ffbcc4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a385c09827713dc3e6d713bfad8460706" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>mul</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a69ae0402d116fc9c71908d8508dc2f09" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ones</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1afc9c2c0b17ecd00932bc5fbc72f9bce0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ones</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6ed33f15d7bf0172efb62d61b3751284" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ones</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a75b1b5424cf014f00d8f06ba1818a5d8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator Matx&lt; _Tp, m, n &gt;</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a3896b518731a7a1e9cbf59aef1168734" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator std::array&lt; _Tp, _Nm &gt;</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a5d043937e7a4cad632397a9dd8dfee2e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator std::vector&lt; _Tp &gt;</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ae4766cf75071f4e4db698c4120abe57b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator Vec&lt; _Tp, n &gt;</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ad543b6bd296ae1247032c750af4718e1" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator()</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a4272fce43d7405603fbb5e5f52580e57" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator()</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aee56475f834069b1fad3877c0747aaeb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator()</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa9bf4fcbb6e854a6db7b7254a205fac9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator()</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aed1f81fe7efaacc2bd95149cdfa34302" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2a0798475170fb3a23b5bc63686de334" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa5c947f7e449a4d856a4f3a87fcebd50" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a86d190d68dbd801a2bd555d0905979fd" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a88bbb01901fdfe3f1d0592c592e8757c" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>pop_back</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a13acd320291229615ef15f96ff1ff738" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af13f821918f452657f53bc3f750323cb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af774caab4a38c6f7890f3254ad71eccf" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1abcfcc1798528b49495e1263eab31127d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ad2bc0c6a23243540e16607868c17be92" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1abfb233ffa8b26a78c36e733f61da2a3e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ab0e3de187bb27c384269b243e8789ba9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a3ef72b9ebc9581796ed68382df8fb064" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a7ce1d8cc9a83ae7cab79766d0eb6c0a8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a9ea1a1bfbbb2393a4e162230dccbe1f0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a5a9ffc908ac90604f36a8b6a1038747d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6a6b3696440fe48751bfe60fe2a729f3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6f4278ede80e7a9fe55d8b03710e2343" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1abda2b96aa438a808b43425040a7da81a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2bf43f93c5cb610b657bd6e0e091c062" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a476f18d2b8d99748005150b24752512d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a7cb2719706bcae72d26dbc9b2fdc02e6" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac30da0a78cd38a72e8902f52660e2543" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a36ab9a1de78fd00a4f9acf3c8a5d4d05" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a15cac608c7a27fb961a81b9409aaa7e8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af4bd5c2cb936dd363816d867aab22a61" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>push_back</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a1cfeb3a75570697426971403fc1ddb0d" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>push_back</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6fc040ee744749ba434fd5806ce2e3f2" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>push_back</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a3676bae1741459eda3771e8653357c53" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>push_back</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a57c658e2a97dda24fef1be2e625da914" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>push_back_</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ae48d4913285518e2c21a3457017e716e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>release</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a0706ed6c42e288926c5ad415b976bbe2" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>reserve</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a923eead22fe7f0c48aa000158df920f3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>reserveBuffer</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a4eb96e3251417fa88b78e2abd6cfd7d8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>reshape</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a50e606fe51f53b896b66051634a018fb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>reshape</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ab2e41a510891e548f744832cf9b8ab89" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>reshape</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ad0127b138acfcc2dcd5dafc51175b309" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>resize</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1abdbf4852beb3af95977fa289f6c7034c" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>resize</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a4b22e1c23af7a7f2eef8fa478cfa7434" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>row</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa6542193430356ad631a9beabc624107" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>rowRange</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a6f5b8257ea38a26295944e9a69caf7e7" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>rowRange</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1abed816466c45234254d25bc59c31245e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>rows</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a536a771cbad0b8360091e0315ebfc524" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>setDefaultAllocator</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a0440e2a164c0b0d8462fb1e487be9876" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>setTo</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a146f8e8dda07d1365a575ab83d9828d1" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>size</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ab4b0843e64328eb2a026b5b9ede726fe" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>step</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a0066c8eee40c1706395b1e57f00e0857" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>step1</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1ac0da3ccbc32a8894fc03afb9cea40150a1db725f4a7efd16a41581b4fc54e7aad" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>SUBMATRIX_FLAG</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aaa428c60ccb6d8ea5de18f63dfac8e11" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>t</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa4d317d43fb0cba9c2503f3c61b866c8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>total</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a5c506fc8b2cf52375e0d8be26aae0df4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>total</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1af2d2652e552d7de635988f18a84b53e5" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>type</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1aa6207c8cf9a3e442f153dc0241aea600a03b3e6a1defa1189b67c9f3d70b7c448" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>TYPE_MASK</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a2742469fe595e1b9036f60d752d08461" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>u</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a3520c52cecff18ab7b243b2b45df7bc0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>updateContinuityFlag</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a0b57b6a326c8876d944d188a46e0f556" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>zeros</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a095db10924bc801644a29074a755b6e9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>zeros</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a961cf7d4f82253d93bb5b8ff54522087" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>zeros</name></member>
      <member refid="d3/d63/classcv_1_1Mat_1a1b2ae166171f6a7306cf09ff67a2153f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>~Mat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>