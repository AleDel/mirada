<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dd/d01/group__videoio__winrt" kind="group">
    <compoundname>videoio_winrt</compoundname>
    <title>WinRT glue for video I/O</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dd/d01/group__videoio__winrt_1ga5291115322efc2f86c7551ab37ab6554" prot="public" static="no">
        <name>@83</name>
        <enumvalue id="dd/d01/group__videoio__winrt_1gga5291115322efc2f86c7551ab37ab6554a0138ded351ab41c87d216bf128bcc1b7" prot="public">
          <name>OPEN_CAMERA</name>
          <initializer>= 300</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d01/group__videoio__winrt_1gga5291115322efc2f86c7551ab37ab6554a5a4ff95ee598bda6d396d9c2170b2583" prot="public">
          <name>CLOSE_CAMERA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d01/group__videoio__winrt_1gga5291115322efc2f86c7551ab37ab6554a8905331d148c6456bb412654b366886a" prot="public">
          <name>UPDATE_IMAGE_ELEMENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d01/group__videoio__winrt_1gga5291115322efc2f86c7551ab37ab6554ac59c8b93c4987d5342beea897023e8e8" prot="public">
          <name>SHOW_TRACKBAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="39" column="1" bodyfile="opencv2/videoio/cap_winrt.hpp" bodystart="39" bodyend="44"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/d01/group__videoio__winrt_1gae38c075896983dfe2de0d6bc5b15ace8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::winrt_imshow</definition>
        <argsstring>()</argsstring>
        <name>winrt_imshow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Must be called to update attached image source. Code sample is available for <ref refid="dd/d01/group__videoio__winrt_1gac0bbefb5e7954d63596698905f20b2ed" kindref="member">winrt_startMessageLoop()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dd/d01/group__videoio__winrt_1gaf781e41ae34a6993e0c7094bb7d5d6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::winrt_onVisibilityChanged</definition>
        <argsstring>(bool visible)</argsstring>
        <name>winrt_onVisibilityChanged</name>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Must be called from WinRT specific callback to handle image grabber state. Here is how the class can be used: <programlisting><codeline><highlight class="normal">MainPage::MainPage()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Window::Current-&gt;VisibilityChanged<sp/>+=<sp/>ref<sp/>new<sp/>Windows::UI::Xaml::WindowVisibilityChangedEventHandler(this,<sp/>&amp;Application::MainPage::OnVisibilityChanged);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Application::MainPage::OnVisibilityChanged(Platform::Object<sp/>^sender,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Windows::UI::Core::VisibilityChangedEventArgs<sp/>^e)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::winrt_onVisibilityChanged(e-&gt;Visible);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dd/d01/group__videoio__winrt_1ga1415c645960c00ec5f3878365bf9a348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::winrt_setFrameContainer</definition>
        <argsstring>(::Windows::UI::Xaml::Controls::Image^ image)</argsstring>
        <name>winrt_setFrameContainer</name>
        <param>
          <type>::Windows::UI::Xaml::Controls::Image^</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Must be called to assign WinRT control holding image you&apos;re working with. Code sample is available for <ref refid="dd/d01/group__videoio__winrt_1gac0bbefb5e7954d63596698905f20b2ed" kindref="member">winrt_startMessageLoop()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dd/d01/group__videoio__winrt_1gac0bbefb5e7954d63596698905f20b2ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::winrt_startMessageLoop</definition>
        <argsstring>(std::function&lt; void(Args...)&gt; &amp;&amp;callback, Args... args)</argsstring>
        <name>winrt_startMessageLoop</name>
        <param>
          <type>std::function&lt; void(Args...)&gt; &amp;&amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dd/d01/group__videoio__winrt_1ga029eab168c861bcb6f10802de9150d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::winrt_startMessageLoop</definition>
        <argsstring>(void callback(Args...), Args... args)</argsstring>
        <name>winrt_startMessageLoop</name>
        <param>
          <type>void </type>
          <declname>callback</declname>
          <array>Args...</array>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dd/d01/group__videoio__winrt_1ga1d21b5d97771470f128859c8bc648f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void cv::winrt_startMessageLoop</definition>
        <argsstring>(void callback(void))</argsstring>
        <name>winrt_startMessageLoop</name>
        <param>
          <type>void </type>
          <declname>callback</declname>
          <array>void</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Starts (1) frame-grabbing loop and (2) message loop<orderedlist>
<listitem><para>Function passed as an argument must implement common OCV reading frames pattern (see <ref refid="d8/dfe/classcv_1_1VideoCapture" kindref="compound">cv::VideoCapture</ref> documentation) AND call cv::winrt_imgshow().</para></listitem><listitem><para>Message processing loop required to overcome WinRT container and type conversion restrictions. OCV provides default implementation Here is how the class can be used: <programlisting><codeline><highlight class="normal">void<sp/>cvMain()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>frame;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>VideoCapture<sp/>cam;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cam.open(0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cam<sp/>&gt;&gt;<sp/>frame;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>don&apos;t<sp/>reprocess<sp/>the<sp/>same<sp/>frame<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!cam.grab())<sp/>continue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>your<sp/>processing<sp/>logic<sp/>goes<sp/>here</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>obligatory<sp/>step<sp/>to<sp/>get<sp/>XAML<sp/>image<sp/>component<sp/>updated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>winrt_imshow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MainPage::MainPage()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InitializeComponent();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::winrt_setFrameContainer(cvImage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cv::winrt_startMessageLoop(cvMain);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencv2/videoio/cap_winrt.hpp" line="93" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
