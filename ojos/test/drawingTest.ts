import test from 'ava'
import { del, mat2data } from 'mirada'
import { Ellipse, Line, Rectangle, scalarColor } from '../src'
import { loadMirada } from './testUtil'

test.before(loadMirada)

test('line inPlace', async t => {
  const src = new cv.Mat(10, 10, cv.CV_8UC4)
  const dst = new Line().exec({ src, dst: src, pt1: { x: 2, y: 3 }, pt2: { x: 9, y: 8 }, color: scalarColor('#ee11aa99') })
  t.true(src === dst)
  t.deepEqual(mat2data(src), { "rows": 10, "cols": 10, "type": 24, "data": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0CFRMAAAAAAAAAAAAAAABY8mMAAAAAAIAAAACxAQAA8LpiAPC6YgCdC29kiQpiWMo9GQcBAAAACLtiAAi7YgAAAAAAAAAAAMg/EgABAAAAeFoXFdsQnI3SD5KDXQIbGCyqAwAAAAAARQMAAAAAAACY+mMAwCkSAJj8YwDEJx4M4Rh/bucQpZViB0U+AAAAAAEAAAALAAAASQMAACkAAADkPhIA5D4SAHRlbnOiS4F+6hSml59Jin1vbkRlZgAAAJAAAABCAAAALKoDAAAAAABhAwAAAAAAAG/YbhjZHGNRwCkUAsApEgDAKRIA4LtiAAMAAAAAAAAAAQAAAAUAAAA4AAAARQAEBMCuYgL8PhIAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" })
  del(src)
})

test('line not inPlace', async t => {
  const src = cv.Mat.zeros(10, 10, cv.CV_8UC4)
  const dst = cv.Mat.zeros(10, 10, cv.CV_8UC4)
  const dst2 = new Line().exec({ src, dst, pt1: { x: 2, y: 3 }, pt2: { x: 9, y: 8 }, color: scalarColor('#ee11aa99') })
  t.false(src === dst)
  t.true(dst2 === dst)
  t.deepEqual(mat2data(src), { "rows": 10, "cols": 10, "type": 24, "data})
  t.deepEqual(mat2data(dst), { "rows": 10, "cols": 10, "type": 24, "data": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0CFRMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdC29kiQpiWAsACAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQIXFdsQnI3MD5KDJgIbGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAg0Mqwx6bucQpZVgB0U+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgB0U+5xCllWQHSEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYCGxh/CVtRBAACAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAEBAIAAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" })
  del(src, dst)
})

test('rectangle not inPlace', async t => {
  const src = cv.Mat.zeros(10, 10, cv.CV_8UC4)
  const dst = cv.Mat.zeros(10, 10, cv.CV_8UC4)
  const dst2 = new Rectangle().exec({ src, dst, pt1: { x: 2, y: 3 }, pt2: { x: 9, y: 8 }, color: scalarColor('#ee11aa99'), thickness: cv.FILLED })
  t.false(src === dst)
  t.true(dst2 === dst)
  t.deepEqual(mat2data(src), { "rows": 10, "cols": 10, "type": 24, "data": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" })
  t.deepEqual(mat2data(dst), { "rows": 10, "cols": 10, "type": 24, "data": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcCEQ8vBCIeMQQkIDEEJCAxBCQgGQISEAAAAAAAAAAAAAAAABcCEQ/uEaqZ7hGqme4RqpnuEaqZ7hGqme4RqpnuEaqZ7hGqmQAAAAAvBCIe7hGqme4RqpnuEaqZ7hGqme4RqpnuEaqZ7hGqme4RqpkAAAAAMQQkIO4RqpnuEaqZ7hGqme4RqpnuEaqZ7hGqme4RqpnuEaqZAAAAADEEJCDuEaqZ7hGqme4RqpnuEaqZ7hGqme4RqpnuEaqZ7hGqmQAAAAAZAhIQ7hGqme4RqpnuEaqZ7hGqme4RqpnuEaqZ7hGqme4RqpkAAAAAAAAAAO4RqpnuEaqZ7hGqme4RqpnuEaqZ7hGqme4RqpnuEaqZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" })
  del(src, dst)

})

test('ellipse not inPlace', async t => {
  const src = cv.Mat.zeros(14, 14, cv.CV_8UC4)
  const dst = cv.Mat.zeros(14, 14, cv.CV_8UC4)
  const dst2 = new Ellipse().exec({ src, dst, center: { x: 7, y: 7 }, angle: 33, size: { width: 7, height: 5 }, color: scalarColor('#aa3366ee'), thickness: 1, lineType: cv.LINE_AA })
  t.false(src === dst)
  t.true(dst2 === dst)
  t.deepEqual(mat2data(src), { "rows": 14, "cols": 14, "type": 24, "data})
  t.deepEqual(mat2data(dst), { "rows": 14, "cols": 14, "type": 24, "data": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBAQMGAYQIQwEBxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAQHEIInTreKKVLChCdPuF0bOIICAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0ECBKMKlPDaSA+k0ITKV5UGjJ3jCpUxHslSqwCAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBQpXo4rVsgRBAoYAAAAAAAAAAAMBAYQhihQvGogP5QCAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAuDhxAmC5b1SQLFDIAAAAAAAAAAAAAAAAkCxQymC5b1S4OHEAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgRqID+UhihQvAwEBhAAAAAAAAAAABEEChiPK1XIRBQpXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAJ7JUqsjCpUxFQaMndCEyleaB8/k4spVMMNBAgSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgRdGziChCdPuIopUsKCJ063DAQHEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAcQGAYQIQgEBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" })
  del(src, dst)
})

test('ellipse inPlace array options', async t => {
  const src = cv.Mat.zeros(14, 14, cv.CV_8UC4)
  // options order: 'center', 'size', 'angle', 'color', 'thickness', 'lineType'
  const dst = new Ellipse().exec(src, src, { x: 7, y: 7 }, { width: 7, height: 5 }, 33, scalarColor('#aa3366ee'), 1, cv.LINE_AA)
  t.true(src === dst)
  t.deepEqual(mat2data(dst), { "rows": 14, "cols": 14, "type": 24, "data": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBAQMGAYQIQwEBxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAQHEIInTreKKVLChCdPuF0bOIICAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0ECBKMKlPDaSA+k0ITKV5UGjJ3jCpUxHslSqwCAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBQpXo4rVsgRBAoYAAAAAAAAAAAMBAYQhihQvGogP5QCAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAuDhxAmC5b1SQLFDIAAAAAAAAAAAAAAAAkCxQymC5b1S4OHEAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgRqID+UhihQvAwEBhAAAAAAAAAAABEEChiPK1XIRBQpXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAJ7JUqsjCpUxFQaMndCEyleaB8/k4spVMMNBAgSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgRdGziChCdPuIopUsKCJ063DAQHEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAcQGAYQIQgEBAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" })
  del(src)
})
