import {Project, TypeGuards} from 'ts-morph'
import {extractMemberSignatures} from 'typescript-member-signatures'
import { writeFileSync, write } from 'fs';
interface O{
  miradaSources:string
}
function generateCommands(o:O){
  const p = new Project({tsConfigFilePath: o.miradaSources+'/tsconfig.json', addFilesFromTsConfig: true})
  const types = p.getSourceFiles().find(f=>f.getFilePath().endsWith('command/types.ts'))!
  const commandsByName = types.getInterface('CommandsByName')!
  const d = commandsByName.getProperties()
  .map(p=>({name: p.getName(), type: p.getType()!.getSymbol()!.getDeclarations()
  .filter(TypeGuards.isInterfaceDeclaration)}))
  .filter(d=>d.type.length)
  .map(d=>({...d, type: d.type[0]!}))
  .map(d=>({...d, signature:extractMemberSignatures({declarations: [d.type], target: '', generateMarkdownDocs: true})[0]}))
  .map(d=>({...d, name: d.name.split('.')[1].split(']')[0]}))
  const h = d.map(d=>`
  {
    name: '${d.name}',
    signature: ${JSON.stringify(d.signature.signature)},
    doc: ${JSON.stringify(d.type.getJsDocs().map(n=>n.getInnerText()).join('\n\n'))},
    properties: [
    ${d.signature.properties.map(p=>`
      { 
        name: '${p.name}', 
        type: '${getPType(p)}', 
        doc: ${JSON.stringify(p.jsDocsText)},
        optional: ${p.signature.includes('?')?'true':'false'}
      }`.trim()).join(',\n      ')}
    ]
  }`)

const s = `
// this file was  auto generated by scripts/generateCommands.ts

export interface Prop {
  name: string
  type: string
  doc: string
  optional: boolean
}

export interface Command {
  name: ${d.map(d=>`'${d.name}'`).join(' | ')}
  doc: string
  signature: string
  properties: Prop[]
}

export const commands: Command[] = [
  ${h.join(',\n    ')}
]
`
writeFileSync('src/commands.ts', s)
// console.log(d);

// writeFileSync('tmp.json', JSON.stringify(d.map(d=>({name: d.name, signatures:extractMemberSignatures({declarations: d.type, target: '', generateMarkdownDocs: true})})), null, 2))
// console.log()

}

generateCommands({miradaSources: '../mirada'})

function getPType(p) {
  let t= p.signature.split(':')[1].trim().replace(/[^a-z0-9_]/ig, '').trim()
  return t==='T' ? `string` :  t
}
