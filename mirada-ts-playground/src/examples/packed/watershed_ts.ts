
export const watershed_ts: string = "import * as Mirada from 'mirada'\ndeclare var cv: Mirada.CV\n\n(async () => {\n  const src = await Mirada.fromUrl('coins.png')\n  let dst = new cv.Mat()\n  let gray = new cv.Mat()\n  let opening = new cv.Mat()\n  let coinsBg = new cv.Mat()\n  let coinsFg = new cv.Mat()\n  let distTrans = new cv.Mat()\n  let unknown = new cv.Mat()\n  let markers = new cv.Mat()\n  // gray and threshold image\n  cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0)\n  cv.threshold(gray, gray, 0, 255, cv.THRESH_BINARY_INV + cv.THRESH_OTSU)\n  // get background\n  let M = cv.Mat.ones(3, 3, cv.CV_8U)\n  cv.erode(gray, gray, M)\n  cv.dilate(gray, opening, M)\n  cv.dilate(opening, coinsBg, M, new cv.Point(-1, -1), 3)\n  // distance transform\n  cv.distanceTransform(opening, distTrans, cv.DIST_L2, 5)\n  cv.normalize(distTrans, distTrans, 1, 0, cv.NORM_INF)\n  // get foreground\n  cv.threshold(distTrans, coinsFg, 0.7 * 1, 255, cv.THRESH_BINARY)\n  coinsFg.convertTo(coinsFg, cv.CV_8U, 1, 0)\n  cv.subtract(coinsBg, coinsFg, unknown)\n  // get connected components markers\n  cv.connectedComponents(coinsFg, markers)\n  for (let i = 0; i < markers.rows; i++) {\n    for (let j = 0; j < markers.cols; j++) {\n      markers.intPtr(i, j)[0] = markers.ucharPtr(i, j)[0] + 1\n      if (unknown.ucharPtr(i, j)[0] == 255) {\n        markers.intPtr(i, j)[0] = 0\n      }\n    }\n  }\n  cv.cvtColor(src, src, cv.COLOR_RGBA2RGB, 0)\n  cv.watershed(src, markers)\n  // draw barriers\n  for (let i = 0; i < markers.rows; i++) {\n    for (let j = 0; j < markers.cols; j++) {\n      if (markers.intPtr(i, j)[0] == -1) {\n        src.ucharPtr(i, j)[0] = 255 // R\n        src.ucharPtr(i, j)[1] = 0 // G\n        src.ucharPtr(i, j)[2] = 0 // B\n      }\n    }\n  }\n  const dest = Mirada.toRgba(src)\n  cv.imshow(document.getElementById('outputCanvas')!, dest)\n  src.delete()\n  dst.delete()\n  gray.delete()\n  opening.delete()\n  coinsBg.delete()\n  dest.delete()\n  coinsFg.delete()\n  distTrans.delete()\n  unknown.delete()\n  markers.delete()\n  M.delete()\n})()\n";
