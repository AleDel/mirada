
export const faceDetection_ts: string = "// import * as Mirada_ from 'mirada'\n// declare var Mirada: typeof Mirada_\n\n// (async ()=>{\n\n// const src = await Mirada.fromFile('test/assets/lenna.jpg')\n//   let gray = new cv.Mat()\n//   cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0)\n//   let faces = new cv.RectVector()\n//   let eyes = new cv.RectVector()\n//   let faceCascade = new cv.CascadeClassifier()\n//   let eyeCascade = new cv.CascadeClassifier()\n\n//   // load pre-trained classifier files (./test/assets/*.xml)\n//   // Note that current local folder is mounted at /work\n//   // Showing two two ways of reference files:\n\n//   // Using absolute path:\n//   faceCascade.load('/work/test/assets/haarcascade_frontalface_default.xml')\n//   // Using relative path (we need to change the current working directory using FS.chdir() first)\n//   cv.FS.chdir('/work')\n//   eyeCascade.load('test/assets/haarcascade_eye.xml')\n\n//   // detect faces\n//   let msize = new cv.Size(0, 0)\n//   faceCascade.detectMultiScale(gray, faces, 1.1, 3, 0, msize, msize)\n\n//   for (let i = 0; i < faces.size(); ++i) {\n//     let roiGray = gray.roi(faces.get(i))\n//     let roiSrc = src.roi(faces.get(i))\n//     let point1 = new cv.Point(faces.get(i).x, faces.get(i).y)\n//     let point2 = new cv.Point(faces.get(i).x + faces.get(i).width,\n//       faces.get(i).y + faces.get(i).height)\n//     cv.rectangle(src, point1, point2, [255, 0, 0, 255])\n//     // detect eyes in face ROI\n//     eyeCascade.detectMultiScale(roiGray, eyes)\n//     for (let j = 0; j < eyes.size(); ++j) {\n//       let point1 = new cv.Point(eyes.get(j).x, eyes.get(j).y)\n//       let point2 = new cv.Point(eyes.get(j).x + eyes.get(j).width,\n//         eyes.get(j).y + eyes.get(j).height)\n//       cv.rectangle(roiSrc, point1, point2, [0, 0, 255, 255])\n//     }\n//     roiGray.delete(); roiSrc.delete()\n//   }\n//   cv.imshow(document.getElementById('outputCanvas')!, src)\n//     src.delete(); gray.delete(); faceCascade.delete(); \n//   eyeCascade.delete(); faces.delete(); eyes.delete()\n\n// })()\n";
