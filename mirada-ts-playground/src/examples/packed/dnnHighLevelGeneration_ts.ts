
export const dnnHighLevelGeneration_ts: string = "import * as Mirada from 'mirada'\nimport * as cv from 'mirada'\n\n(async () => {\n  const canvas = document.getElementById('outputCanvas')! as HTMLCanvasElement\n  var image: Mirada.Mat = await cv.imread(canvas)\n  await Mirada.loadDataFile('pointilism.onnx')\n  const model = cv.readNetFromONNX('pointilism.onnx')\n  const size = new cv.Size(512, 512)\n  // Whether to swap Red and Blue channels since OpenCV loads images in BGR\n  let swapRB = true;\n  // rescale the image (image * scale)\n  let scale = 1.0;\n  const mean = new cv.Scalar(); // mean to subtract (e.g: 103.939, 116.779, 123.68)\n  // Set the transformations we want to apply\n  model.setInputParams(scale, size, mean, swapRB);\n  // Network Forward pass\n  let out = new cv.Mat()\n  model.generate(image, out);\n  cv.imshow(canvas, out)\n  image.delete()\n  out.delete()\n})()\n";
