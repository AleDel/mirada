
export const trackbarVideo_ts: string = "import * as Mirada from 'mirada'\ndeclare var cv: Mirada.CV\n\n// this example loads two videos and uses cv.addWeighted() the same way as trackbar example mixing frames and\n// showing the result in a canvas. Could take some seconds to load the videos. \n(async () => {\n  var url1 = 'https://cancerberosgx.github.io/demos/media/video1.mp4'\n  var url2 = 'https://cancerberosgx.github.io/demos/media/video2.mp4'\n  let processing = false\n  const FPS = 30\n  installControls()\n  const outputCanvas = document.getElementById('outputCanvas')! as HTMLCanvasElement\n  const video1 = document.getElementById('customVideo1')! as HTMLVideoElement\n  const video2 = document.getElementById('customVideo2')! as HTMLVideoElement\n  let trackbar = document.getElementById('trackbar')! as HTMLInputElement\n\n  // build the Mat\n  const src1 = new cv.Mat(video1.height, video1.width, cv.CV_8UC4)\n  const src2 = new cv.Mat(video2.height, video2.width, cv.CV_8UC4)\n  const dst = new cv.Mat(Math.min(video1.height, video2.height), Math.min(video1.width, video2.width), cv.CV_8UC1)\n  const cap1 = new cv.VideoCapture(video1)\n  const cap2 = new cv.VideoCapture(video2)\n  // the the video sources (this won't play the yet)\n  video1.src = url1\n  video2.src = url2\n  processing = true\n  // after thw two videos start playing we call processVideo() which will repeatedly blend their frames.\n  await Promise.all([video1.play(), video2.play()])\n  setTimeout(uninstallControls, 15000)\n  processVideo()\n  function processVideo() {\n    try {\n      if (!processing) {\n        src1.delete()\n        src2.delete()\n        dst.delete()\n        return\n      }\n      else {\n        const begin = Date.now()\n        cap1.read(src1)\n        cap2.read(src2)\n        let alpha = trackbar.valueAsNumber / parseInt(trackbar.max)\n        let beta = 1.0 - alpha\n        cv.addWeighted(src1, alpha, src2, beta, 0.0, dst, -1)\n        cv.imshow(outputCanvas, dst)\n        const delay = 1000 / FPS - (Date.now() - begin)\n        setTimeout(processVideo, delay)\n      }\n    }\n    catch (err) {\n      console.error(err)\n    }\n  }\n\n  // the rest is just HTML for the \"UI\"\n  function uninstallControls() {\n    processing = false\n    if (document.querySelector('#outputContainer>.customWrapper')) {\n      document.querySelector('#outputContainer>.customWrapper')!.remove()\n    }\n  }\n\n  function installControls() {\n    uninstallControls()\n    const el = document.querySelector('#outputContainer>.wrapper')!\n    el.insertAdjacentHTML('afterend', `\n<div class=\"customWrapper\" >\n  <h5>Below are two input videos - use this slider to  morph between them</h5>\n  <input type=\"range\" id=\"trackbar\" value=\"50\" min=\"0\" max=\"100\" step=\"1\" />\n  <table>\n  <tr>\n  <td>\n  <label  >input 1<br /><video crossOrigin=\"anonymous\" id=\"customVideo1\" \n    width=\"320\" height=\"240\" muted /></label>\n    </td> \n  <td>\n  <label  >input 2<br /><video crossOrigin=\"anonymous\" id=\"customVideo2\" \n    width=\"320\" height=\"240\" muted /></label>\n    </td>\n  </tr>  \n</div>\n `)\n  }\n})()\n\n";
