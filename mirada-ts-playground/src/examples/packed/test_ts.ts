
export const test_ts: string = "export default class implements PackedExample {\n  execute(files: File[]) {\n    return { }\n  }\n\n  filePath = '/src/examples/test.ts'\n  name = 'Print AST'\n  description = 'Prints a textual AST representation of selected file or all files of none selected'\n  content =  `\nimport {Mat, CV} from 'opencv'\ndeclare var cv: CV\n\nconst src = new cv.Mat()\nlet dst = new cv.Mat()\nlet gray = new cv.Mat()\nlet opening = new cv.Mat()\nlet coinsBg = new cv.Mat()\nlet coinsFg = new cv.Mat()\nlet distTrans = new cv.Mat()\nlet unknown = new cv.Mat()\nlet markers = new cv.Mat()\n// gray and threshold image\ncv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0)\ncv.threshold(gray, gray, 0, 255, cv.THRESH_BINARY_INV + cv.THRESH_OTSU)\n// get background\nlet M = cv.Mat.ones(3, 3, cv.CV_8U)\ncv.erode(gray, gray, M)\ncv.dilate(gray, opening, M)\ncv.dilate(opening, coinsBg, M, new cv.Point(-1, -1), 3)\n// distance transform\ncv.distanceTransform(opening, distTrans, cv.DIST_L2, 5)\ncv.normalize(distTrans, distTrans, 1, 0, cv.NORM_INF)\n// get foreground\ncv.threshold(distTrans, coinsFg, 0.7 * 1, 255, cv.THRESH_BINARY)\ncoinsFg.convertTo(coinsFg, cv.CV_8U, 1, 0)\ncv.subtract(coinsBg, coinsFg, unknown)\n// get connected components markers\ncv.connectedComponents(coinsFg, markers)\nfor (let i = 0; i < markers.rows; i++) {\n  for (let j = 0; j < markers.cols; j++) {\n    markers.intPtr(i, j)[0] = markers.ucharPtr(i, j)[0] + 1\n    if (unknown.ucharPtr(i, j)[0] == 255) {\n      markers.intPtr(i, j)[0] = 0\n    }\n  }\n}\ncv.cvtColor(src, src, cv.COLOR_RGBA2RGB, 0)\ncv.watershed(src, markers)\n// draw barriers\nfor (let i = 0; i < markers.rows; i++) {\n  for (let j = 0; j < markers.cols; j++) {\n    if (markers.intPtr(i, j)[0] == -1) {\n      src.ucharPtr(i, j)[0] = 255 // R\n      src.ucharPtr(i, j)[1] = 0 // G\n      src.ucharPtr(i, j)[2] = 0 // B\n    }\n  }\n}\n`\n}\n\ninterface File {\n  filePath: string\n  content: string\n  selected?: boolean\n  selection?: {\n    endColumn: number\n    endLineNumber: number\n    startColumn: number\n    startLineNumber: number\n  }\n}\n\nimport { PackedExample } from '../packedExamples'\n";
